import json
import telebot
import os
import re
import requests
import locale
import logging
import urllib.parse

from apscheduler.schedulers.background import BackgroundScheduler
from database import (
    create_tables,
    get_orders,
    get_all_orders,
    add_order,
    update_user_phone,
    update_order_status_in_db,
    delete_order_from_db,
    update_user_name,
    update_user_name,
    get_calculation_count,
    increment_calculation_count,
    check_user_subscription,
    update_user_subscription,
    delete_favorite_car,
    get_all_users,
    add_user,
)
from bs4 import BeautifulSoup
from io import BytesIO
from telebot import types
from dotenv import load_dotenv
from urllib.parse import urlparse, parse_qs
from utils import (
    generate_encar_photo_url,
    clean_number,
    get_customs_fees,
    calculate_age,
    format_number,
    get_customs_fees_manual,
)

CALCULATE_CAR_TEXT = "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ê–≤—Ç–æ–º–æ–±–∏–ª—å (Encar, KBChaCha)"
CHANNEL_USERNAME = "HYT_Trading"
BOT_TOKEN = os.getenv("BOT_TOKEN")

load_dotenv()
bot_token = os.getenv("BOT_TOKEN")
bot = telebot.TeleBot(bot_token)
bot.set_webhook("")


# Set locale for number formatting
locale.setlocale(locale.LC_ALL, "en_US.UTF-8")

# Storage for the last error message ID
last_error_message_id = {}

# global variables
car_data = {}
car_id_external = ""
total_car_price = 0
krw_rub_rate = 0
rub_to_krw_rate = 0
usd_rate = 0
users = set()
user_data = {}

car_month = None
car_year = None

vehicle_id = None
vehicle_no = None

usd_to_krw_rate = 0
usd_to_rub_rate = 0

usdt_to_krw_rate = 0
user_orders = {}


################## –ö–û–î –î–õ–Ø –°–¢–ê–¢–£–°–û–í
# –•—Ä–∞–Ω–∏–º –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
pending_orders = {}
user_contacts = {}
user_names = {}

MANAGERS = [728438182]
FREE_ACCESS_USERS = {
    728438182,  # –î–∏–º–∞,
}

ORDER_STATUSES = {
    "1": "üöó –ê–≤—Ç–æ –≤—ã–∫—É–ø–ª–µ–Ω (–Ω–∞ –±–∞–∑–µ)",
    "2": "üö¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –ø–æ—Ä—Ç –≥. –ü—É—Å–∞–Ω –Ω–∞ –ø–æ–≥—Ä—É–∑–∫—É",
    "3": "üåä –í –ø—É—Ç–∏ –≤–æ –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫",
    "4": "üõÉ –¢–∞–º–æ–∂–µ–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞",
    "5": "üì¶ –ü–æ–≥—Ä—É–∑–∫–∞ –¥–æ –ú–°–ö",
    "6": "üöõ –î–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –∫–ª–∏–µ–Ω—Ç—É",
}


@bot.message_handler(commands=["stats"])
def show_stats(message):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞. –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º."""
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º
    if user_id not in MANAGERS:
        bot.send_message(
            user_id,
            "‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ. –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º.",
        )
        return

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users = get_all_users()

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total_users = len(users)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–¥–µ—Å—å
        chunk_message = f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>\n\n"
        chunk_message += f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{total_users}</b>\n\n"

        # –°–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if users:
            chunk_message += "<b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n"
            for i, user in enumerate(users[:10], 1):
                username = user["username"] if user["username"] else "–ù–µ—Ç username"
                name = f"{user['first_name']} {user['last_name'] or ''}".strip()
                reg_date = (
                    user["registered_at"].strftime("%d.%m.%Y %H:%M")
                    if user["registered_at"]
                    else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                )

                chunk_message += f"{i}. {name} (@{username})\n"
                chunk_message += f"   ID: {user['user_id']} | –î–∞—Ç–∞: {reg_date}\n---------------------------------\n"
        else:
            chunk_message += "–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."

        bot.send_message(user_id, chunk_message, parse_mode="HTML")
    except Exception as e:
        bot.send_message(
            user_id, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}"
        )


@bot.callback_query_handler(func=lambda call: call.data.startswith("add_favorite_"))
def add_favorite_car(call):
    global car_data
    user_id = call.message.chat.id

    if not car_data or "name" not in car_data:
        bot.answer_callback_query(
            call.id, "üö´ –û—à–∏–±–∫–∞: –î–∞–Ω–Ω—ã–µ –æ –º–∞—à–∏–Ω–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.", show_alert=True
        )
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–≤—Ç–æ —É–∂–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º
    existing_orders = get_orders(user_id)
    if any(order["id"] == car_data.get("car_id") for order in existing_orders):
        bot.answer_callback_query(call.id, "‚úÖ –≠—Ç–æ—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª—å —É–∂–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = bot.get_chat(user_id)
    user_name = user.username if user.username else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    phone_number = user_contacts.get(user_id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç –∑–∞–∫–∞–∑–∞
    order_data = {
        "user_id": user_id,
        "car_id": car_data.get("car_id", "–ù–µ—Ç ID"),
        "title": car_data.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"),
        "price": f"‚Ç©{format_number(car_data.get('car_price', 0))}",
        "link": car_data.get("link", "–ù–µ—Ç —Å—Å—ã–ª–∫–∏"),
        "year": car_data.get("year", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"),
        "month": car_data.get("month", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"),
        "mileage": car_data.get("mileage", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"),
        "fuel": car_data.get("fuel", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"),
        "engine_volume": car_data.get("engine_volume", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"),
        "transmission": car_data.get("transmission", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"),
        "images": car_data.get("images", []),
        "status": "üîÑ –ù–µ –∑–∞–∫–∞–∑–∞–Ω–æ",
        "total_cost_usd": car_data.get("total_cost_usd", 0),
        "total_cost_krw": car_data.get("total_cost_krw", 0),
        "total_cost_rub": car_data.get("total_cost_rub", 0),
        "user_name": user_name,  # ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º user_name
        "phone_number": phone_number,  # ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º phone_number (–µ—Å–ª–∏ –Ω–µ—Ç, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    }

    # –õ–æ–≥–∏—Ä—É–µ–º, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –∫–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –ë–î
    print(f"‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑: {order_data}")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
    add_order(order_data)

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    bot.answer_callback_query(
        call.id, "‚≠ê –ê–≤—Ç–æ–º–æ–±–∏–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!", show_alert=True
    )


@bot.message_handler(commands=["my_cars"])
def show_favorite_cars(message):
    user_id = message.chat.id
    orders = get_orders(user_id)  # –ë–µ—Ä—ë–º –∑–∞–∫–∞–∑—ã –∏–∑ –ë–î

    if not orders:
        bot.send_message(user_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π.")
        return

    for car in orders:
        car_id = car["car_id"]  # –ò—Å–ø–æ–ª—å–∑—É–µ–º car_id –≤–º–µ—Å—Ç–æ id
        car_title = car["title"]
        car_status = car["status"]
        car_link = car["link"]
        car_year = car["year"]
        car_month = car["month"]
        car_mileage = car["mileage"]
        car_engine_volume = car["engine_volume"]
        car_transmission = car["transmission"]
        total_cost_usd = car["total_cost_usd"]
        total_cost_krw = car["total_cost_krw"]
        total_cost_rub = car["total_cost_rub"]

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        response_text = (
            f"üöó *{car_title} ({car_id})*\n\n"
            f"üìÖ {car_month}/{car_year} | ‚öôÔ∏è {car_transmission}\n"
            f"üî¢ –ü—Ä–æ–±–µ–≥: {car_mileage} | üèé –û–±—ä—ë–º: {format_number(car_engine_volume)} cc\n\n"
            f"–°—Ç–æ–∏–º–æ—Å—Ç—å –∞–≤—Ç–æ –ø–æ–¥ –∫–ª—é—á:\n"
            f"${format_number(total_cost_usd)} | ‚Ç©{format_number(total_cost_krw)} | {format_number(total_cost_rub)} ‚ÇΩ\n\n"
            f"üìå *–°—Ç–∞—Ç—É—Å:* {car_status}\n\n"
            f"[üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—å]({car_link})\n\n"
            f"–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º–∏:\n\n"
            f"‚ñ™Ô∏è +82-10-7626-1999\n"
            f"‚ñ™Ô∏è +82-10-7934-6603\n"
        )

        # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = types.InlineKeyboardMarkup()
        if car_status == "üîÑ –ù–µ –∑–∞–∫–∞–∑–∞–Ω–æ":
            keyboard.add(
                types.InlineKeyboardButton(
                    f"üì¶ –ó–∞–∫–∞–∑–∞—Ç—å {car_title}",
                    callback_data=f"order_car_{car_id}",
                )
            )
        keyboard.add(
            types.InlineKeyboardButton(
                "‚ùå –£–¥–∞–ª–∏—Ç—å –∞–≤—Ç–æ –∏–∑ —Å–ø–∏—Å–∫–∞", callback_data=f"delete_car_{car_id}"
            )
        )
        keyboard.add(
            types.InlineKeyboardButton(
                "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"
            )
        )

        bot.send_message(
            user_id, response_text, parse_mode="Markdown", reply_markup=keyboard
        )


@bot.callback_query_handler(func=lambda call: call.data == "show_orders")
def callback_show_orders(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤'"""
    manager_id = call.message.chat.id
    print(f"üìã –ú–µ–Ω–µ–¥–∂–µ—Ä {manager_id} –Ω–∞–∂–∞–ª '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤'")

    # ‚úÖ –í—ã–∑—ã–≤–∞–µ–º show_orders() —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –∏–∑ callback-–∑–∞–ø—Ä–æ—Å–∞
    show_orders(call.message)


def notify_managers(order):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ –≤—Å–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º"""
    print(f"üì¶ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º: {order}")

    # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤"
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(
        types.InlineKeyboardButton(
            "üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤", callback_data="show_orders"
        )
    )

    order_title = order.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
    order_link = order.get("link", "#")
    user_name = order.get("user_name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π")
    user_id = order.get("user_id", None)
    phone_number = order.get("phone_number", "–ù–µ —É–∫–∞–∑–∞–Ω")

    user_mention = f"[{user_name}](tg://user?id={user_id})" if user_id else user_name

    message_text = (
        f"üö® *–ù–æ–≤—ã–π –∑–∞–∫–∞–∑!*\n\n"
        f"üöó [{order_title}]({order_link})\n"
        f"üë§ –ó–∞–∫–∞–∑—á–∏–∫: {user_mention}\n"
        f"üìû –ö–æ–Ω—Ç–∞–∫—Ç: {phone_number}\n"
        f"üìå *–°—Ç–∞—Ç—É—Å:* üïí –û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è\n"
    )

    for manager_id in MANAGERS:
        bot.send_message(
            manager_id,
            message_text,
            parse_mode="Markdown",
            reply_markup=keyboard,
        )


@bot.callback_query_handler(func=lambda call: call.data.startswith("order_car_"))
def order_car(call):
    user_id = call.message.chat.id
    car_id = call.data.split("_")[-1]

    # –ü–æ–ª—É—á–∞–µ–º –∞–≤—Ç–æ –∏–∑ –±–∞–∑—ã
    user_orders = get_orders(user_id)
    order_found = None

    for order in user_orders:
        if str(order["car_id"]) == str(car_id):
            order_found = order
            break
        else:
            print(f"‚ùå –ê–≤—Ç–æ–º–æ–±–∏–ª—å {car_id} –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å {order['car_id']}")

    if not order_found:
        print(f"‚ùå –û—à–∏–±–∫–∞: –∞–≤—Ç–æ {car_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑–µ!")
        bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞: –∞–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    # ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –§–ò–û —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id not in user_names:
        print(f"üìù –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –§–ò–û —É {user_id}")
        bot.send_message(
            user_id,
            "üìù –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ *–§–ò–û* –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:",
            parse_mode="Markdown",
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∑–∞–∫–∞–∑–∞ –≤ `pending_orders`
        pending_orders[user_id] = car_id
        return

    # ‚úÖ –ï—Å–ª–∏ –§–ò–û —É–∂–µ –µ—Å—Ç—å, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω
    if user_id not in user_contacts:
        print(f"üìû –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω —É {user_id}")
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        button = types.KeyboardButton("üìû –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä", request_contact=True)
        markup.add(button)

        bot.send_message(
            user_id,
            "üì≤ –î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, "
            "–Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω WhatsApp –∏–ª–∏ Telegram.",
            reply_markup=markup,
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∑–∞–∫–∞–∑–∞ –≤ `pending_orders`
        pending_orders[user_id] = car_id
        return

    # ‚úÖ –ï—Å–ª–∏ –§–ò–û –∏ —Ç–µ–ª–µ—Ñ–æ–Ω —É–∂–µ –µ—Å—Ç—å ‚Üí –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑
    phone_number = user_contacts[user_id]
    full_name = user_names[user_id]

    update_order_status(car_id, "üïí –û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")
    update_order_status_in_db(order_found["id"], "üïí –û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")

    bot.send_message(
        user_id,
        f"‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –Ω–∞ {order_found['title']} –æ—Ñ–æ—Ä–º–ª–µ–Ω!\n"
        f"üìå –°—Ç–∞—Ç—É—Å: üïí –û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è\n"
        f"üìû –ö–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Å–≤—è–∑–∏: {phone_number}\n"
        f"üë§ –§–ò–û: {full_name}",
        callback_data="show_orders",
    )

    # ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –§–ò–û –≤ –∑–∞–∫–∞–∑ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º
    order_found["user_name"] = full_name
    notify_managers(order_found)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
@bot.message_handler(content_types=["contact"])
def handle_contact(message):
    if not message.contact or not message.contact.phone_number:
        bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞: –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω.")
        return

    user_id = message.chat.id
    phone_number = message.contact.phone_number

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    user_contacts[user_id] = phone_number
    bot.send_message(user_id, f"‚úÖ –í–∞—à –Ω–æ–º–µ—Ä {phone_number} —Å–æ—Ö—Ä–∞–Ω—ë–Ω!")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ–∂–∏–¥–∞–µ–º—ã–π –∑–∞–∫–∞–∑
    if user_id not in pending_orders:
        bot.send_message(user_id, "‚úÖ –í–∞—à –Ω–æ–º–µ—Ä —Å–æ—Ö—Ä–∞–Ω—ë–Ω, –Ω–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ –Ω–µ—Ç.")
        return

    if user_id in pending_orders:
        car_id = pending_orders[user_id]  # –ë–µ—Ä—ë–º car_id –∏–∑ `pending_orders`
        print(f"üì¶ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –∑–∞–∫–∞–∑ –∞–≤—Ç–æ–º–æ–±–∏–ª—è {car_id}")

        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑–∞–Ω–Ω–æ–µ –∞–≤—Ç–æ –∏–∑ –±–∞–∑—ã
        user_orders = get_orders(user_id)
        order_found = None

        for order in user_orders:
            if str(order["car_id"]).strip() == str(car_id).strip():
                order_found = order
                break

        if not order_found:
            bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞: –∞–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
            return

        # –î–æ–±–∞–≤–ª—è–µ–º `user_id` –≤ order_found, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        order_found["user_id"] = user_id
        order_found["phone_number"] = (
            phone_number  # ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –∑–∞–∫–∞–∑–µ
        )

        print(
            f"üõ† –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω {phone_number} –¥–ª—è user_id={user_id}, order_id={order_found['id']}"
        )
        update_user_phone(user_id, phone_number, order_found["id"])
        update_order_status_in_db(order_found["id"], "üïí –û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")

        bot.send_message(
            user_id,
            f"‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –Ω–∞ {order_found['title']} –æ—Ñ–æ—Ä–º–ª–µ–Ω!\n"
            f"üìå –°—Ç–∞—Ç—É—Å: üïí –û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è\n"
            f"üìû –ö–æ–Ω—Ç–∞–∫—Ç: {phone_number}",
        )

        notify_managers(order_found)


@bot.message_handler(
    func=lambda message: not message.text.startswith("/")
    and message.chat.id in pending_orders
)
def handle_full_name(message):
    user_id = message.chat.id
    full_name = message.text.strip()

    # ‚ùå –ï—Å–ª–∏ –§–ò–û –ø—É—Å—Ç–æ–µ, –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –∑–∞–Ω–æ–≤–æ
    if not full_name:
        bot.send_message(
            user_id, "‚ùå –§–ò–û –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û –µ—â—ë —Ä–∞–∑:"
        )
        return

    # ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º –§–ò–û
    user_names[user_id] = full_name
    bot.send_message(user_id, f"‚úÖ –í–∞—à–µ –§–ò–û '{full_name}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ–∂–∏–¥–∞–µ–º—ã–π –∑–∞–∫–∞–∑
    car_id = pending_orders[user_id]  # –ë–µ—Ä—ë–º car_id –∏–∑ `pending_orders`
    print(
        f"üì¶ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –∑–∞–∫–∞–∑ –∞–≤—Ç–æ–º–æ–±–∏–ª—è {car_id} —Å –§–ò–û {full_name}"
    )

    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑–∞–Ω–Ω–æ–µ –∞–≤—Ç–æ –∏–∑ –±–∞–∑—ã
    user_orders = get_orders(user_id)
    order_found = next(
        (
            order
            for order in user_orders
            if str(order["car_id"]).strip() == str(car_id).strip()
        ),
        None,
    )

    if not order_found:
        bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞: –∞–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        return

    # ‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –§–ò–û –≤ –ë–î
    import hashlib

    def convert_car_id(car_id):
        if car_id.isdigit():
            return int(car_id)  # –ï—Å–ª–∏ —É–∂–µ —á–∏—Å–ª–æ, –ø—Ä–æ—Å—Ç–æ –≤–µ—Ä–Ω—É—Ç—å –µ–≥–æ
        else:
            return int(hashlib.md5(car_id.encode()).hexdigest(), 16) % (
                10**9
            )  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —á–∏—Å–ª–æ

    # –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    numeric_car_id = convert_car_id(car_id)

    update_order_status_in_db(order_found["id"], "üïí –û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")
    update_user_name(user_id, full_name)

    # ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–µ–ª–µ—Ñ–æ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id not in user_contacts:
        print(f"üìû –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω —É {user_id}")
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        button = types.KeyboardButton("üìû –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä", request_contact=True)
        markup.add(button)

        bot.send_message(
            user_id,
            "üì≤ –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à *–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞*, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω WhatsApp –∏–ª–∏ Telegram.",
            reply_markup=markup,
            parse_mode="Markdown",
        )
        return  # –ñ–¥—ë–º —Ç–µ–ª–µ—Ñ–æ–Ω, –¥–∞–ª—å—à–µ –Ω–µ –∏–¥—ë–º

    # ‚úÖ –ï—Å–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω —É–∂–µ –µ—Å—Ç—å ‚Üí –∑–∞–≤–µ—Ä—à–∞–µ–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ
    phone_number = user_contacts[user_id]

    bot.send_message(
        user_id,
        f"‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –Ω–∞ {order_found['title']} –æ—Ñ–æ—Ä–º–ª–µ–Ω!\n"
        f"üìå –°—Ç–∞—Ç—É—Å: üïí –û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è\n"
        f"üìû –ö–æ–Ω—Ç–∞–∫—Ç: {phone_number}\n"
        f"üë§ –§–ò–û: {full_name}",
    )

    # ‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º
    order_found["user_name"] = full_name
    print(f"üì¶ –ü–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º –∑–∞–∫–∞–∑: {order_found}")  # –û—Ç–ª–∞–¥–∫–∞
    notify_managers(order_found)

    # ‚úÖ –£–¥–∞–ª—è–µ–º `pending_orders`
    del pending_orders[user_id]


# –§—É–Ω–∫—Ü–∏—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
def process_order(user_id, car_id, username, phone_number):
    # –î–æ—Å—Ç–∞—ë–º –∞–≤—Ç–æ –∏–∑ —Å–ø–∏—Å–∫–∞
    car = next(
        (car for car in user_orders.get(user_id, []) if car["id"] == car_id), None
    )

    if not car:
        bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞: –∞–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    car_title = car.get("title", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    car_link = car.get("link", "–ù–µ—Ç —Å—Å—ã–ª–∫–∏")

    # –ú–µ–Ω–µ–¥–∂–µ—Ä, –∫–æ—Ç–æ—Ä–æ–º—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞—è–≤–∫—É
    manager_chat_id = MANAGERS[0]  # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å ID –º–µ–Ω–µ–¥–∂–µ—Ä–∞

    # –°–æ–æ–±—â–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É
    manager_text = (
        f"üì¢ *–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –Ω–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—å!*\n\n"
        f"üöó {car_title}\n"
        f"üîó [–°—Å—ã–ª–∫–∞ –Ω–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—å]({car_link})\n\n"
        f"üîπ Username: @{username if username else '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone_number if phone_number else '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
    )

    bot.send_message(manager_chat_id, manager_text, parse_mode="Markdown")

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ
    car["status"] = "üïí –û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"
    bot.send_message(
        user_id,
        f"‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –Ω–∞ {car_title} –æ—Ñ–æ—Ä–º–ª–µ–Ω! –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏.",
    )


@bot.message_handler(commands=["orders"])
def show_orders(message):
    manager_id = message.chat.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º
    if manager_id not in MANAGERS:
        bot.send_message(manager_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∑–∞–∫–∞–∑–∞–º.")
        return

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –∑–∞–∫–∞–∑—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    orders = get_all_orders()

    if not orders:
        bot.send_message(manager_id, "üì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.")
        return

    for idx, order in enumerate(orders, start=1):
        order_id = order.get("id", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        car_title = order.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
        user_id = order.get("user_id")
        user_name = order.get("user_name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π")
        phone_number = order.get("phone_number", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        car_status = order.get("status", "üïí –û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")
        car_link = order.get("link", "#")
        car_id = order.get("car_id", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")

        if car_status == "üîÑ –ù–µ –∑–∞–∫–∞–∑–∞–Ω–æ":
            car_status = "üïí –û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"

        user_mention = (
            f"[{user_name}](tg://user?id={user_id})" if user_id else user_name
        )

        response_text = (
            # f"üì¶ *–ó–∞–∫–∞–∑ #{idx}*\n"
            f"üöó *{car_title}* (ID: {car_id})\n\n"
            f"üë§ –ó–∞–∫–∞–∑—á–∏–∫: {user_mention}\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: *{phone_number}*\n\n"
            f"üìå *–°—Ç–∞—Ç—É—Å:* {car_status}\n\n"
            f"[üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—å]({car_link})"
        )

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(
            types.InlineKeyboardButton(
                f"üìå –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å ({car_title})",
                callback_data=f"update_status_{order_id}",
            ),
            types.InlineKeyboardButton(
                f"üóë –£–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑ ({car_title})",
                callback_data=f"delete_order_{order_id}",
            ),
        )
        keyboard.add(
            types.InlineKeyboardButton(
                "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ", callback_data="main_menu"
            )
        )

        bot.send_message(
            manager_id,
            response_text,
            parse_mode="Markdown",
            reply_markup=keyboard,
        )


@bot.callback_query_handler(func=lambda call: call.data.startswith("update_status_"))
def update_order_status(call):
    manager_id = call.message.chat.id
    order_id = call.data.split("_")[-1]  # ‚ùó –ó–¥–µ—Å—å –ø—Ä–∏—Ö–æ–¥–∏—Ç ID –∑–∞–∫–∞–∑–∞, –∞ –Ω–µ car_id

    print(f"üîç –ú–µ–Ω–µ–¥–∂–µ—Ä {manager_id} –ø—ã—Ç–∞–µ—Ç—Å—è –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ {order_id}")

    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã –∏–∑ –±–∞–∑—ã
    orders = get_all_orders()  # ‚úÖ –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –∑–∞–∫–∞–∑—ã
    # print(f"üì¶ –í—Å–µ –∑–∞–∫–∞–∑—ã –∏–∑ –±–∞–∑—ã: {orders}")  # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–∫–∞–∑—ã

    # üõ† –¢–µ–ø–µ—Ä—å –∏—â–µ–º –ø–æ `id`, –∞ –Ω–µ –ø–æ `car_id`
    order_found = next(
        (order for order in orders if str(order["id"]) == str(order_id)), None
    )

    if not order_found:
        print(f"‚ùå –û—à–∏–±–∫–∞: –∑–∞–∫–∞–∑ {order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞: –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    user_id = order_found["user_id"]
    car_id = order_found["car_id"]  # ‚úÖ –ë–µ—Ä—ë–º car_id

    # üî• –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ —Å—Ç–∞—Ç—É—Å–æ–≤
    keyboard = types.InlineKeyboardMarkup()
    for status_code, status_text in ORDER_STATUSES.items():
        keyboard.add(
            types.InlineKeyboardButton(
                status_text,
                callback_data=f"set_status_{user_id}_{order_id}_{status_code}",
            )
        )

    bot.send_message(manager_id, "üìå –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å:", reply_markup=keyboard)


@bot.callback_query_handler(func=lambda call: call.data.startswith("delete_car_"))
def delete_favorite_callback(call):
    user_id = call.message.chat.id
    car_id = call.data.split("_")[2]  # –ü–æ–ª—É—á–∞–µ–º ID –∞–≤—Ç–æ

    delete_favorite_car(user_id, car_id)  # –£–¥–∞–ª—è–µ–º –∞–≤—Ç–æ –∏–∑ –ë–î

    bot.answer_callback_query(call.id, "‚úÖ –ê–≤—Ç–æ —É–¥–∞–ª–µ–Ω–æ –∏–∑ —Å–ø–∏—Å–∫–∞!")
    bot.delete_message(
        call.message.chat.id, call.message.message_id
    )  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–≤—Ç–æ


@bot.callback_query_handler(func=lambda call: call.data.startswith("delete_order_"))
def delete_order(call):
    manager_id = call.message.chat.id
    order_id = call.data.split("_")[-1]

    print(f"üóë –ú–µ–Ω–µ–¥–∂–µ—Ä {manager_id} —Ö–æ—á–µ—Ç —É–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑ {order_id}")

    # –£–¥–∞–ª—è–µ–º –∑–∞–∫–∞–∑ –∏–∑ –±–∞–∑—ã
    delete_order_from_db(order_id)

    bot.answer_callback_query(call.id, "‚úÖ –ó–∞–∫–∞–∑ —É–¥–∞–ª—ë–Ω!")
    bot.send_message(manager_id, f"üóë –ó–∞–∫–∞–∑ {order_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.")


@bot.callback_query_handler(func=lambda call: call.data.startswith("set_status_"))
def set_new_status(call):
    manager_id = call.message.chat.id

    print(f"üîÑ –ü–æ–ª—É—á–µ–Ω `callback_data`: {call.data}")  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö

    # –†–∞–∑–±–∏–≤–∞–µ–º callback_data
    _, _, user_id, order_id, status_code = call.data.split("_", 4)

    if not user_id.isdigit():
        print(f"‚ùå –û—à–∏–±–∫–∞: user_id –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π: {user_id}")
        bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    user_id = int(user_id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
    if status_code not in ORDER_STATUSES:
        print(f"‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ —Å—Ç–∞—Ç—É—Å–∞: {status_code}")
        bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å.")
        return

    new_status = ORDER_STATUSES[status_code]  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—É—Å–∞ –ø–æ –∫–æ–¥—É

    print(
        f"üîÑ –ú–µ–Ω–µ–¥–∂–µ—Ä {manager_id} –º–µ–Ω—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ {order_id} –¥–ª—è {user_id} –Ω–∞ {new_status}"
    )

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–∫–∞–∑—ã
    orders = get_all_orders()
    # print(f"üì¶ –í—Å–µ –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {orders}")  # –õ–æ–≥–∏—Ä—É–µ–º

    # üõ† –ò—â–µ–º –∑–∞–∫–∞–∑ –ø–æ `id`
    order_found = next(
        (order for order in orders if str(order["id"]) == str(order_id)), None
    )

    if not order_found:
        print(f"‚ùå –û—à–∏–±–∫–∞: –∑–∞–∫–∞–∑ {order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞: –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –≤ –ë–î
    update_order_status_in_db(order_id, new_status)

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
    bot.send_message(
        user_id,
        f"üì¢ *–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞!*\n\n"
        f"üöó [{order_found['title']}]({order_found['link']})\n"
        f"üìå –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å:\n*{new_status}*",
        parse_mode="Markdown",
    )

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä—É
    bot.answer_callback_query(call.id, f"‚úÖ –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª—ë–Ω –Ω–∞ {new_status}!")

    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑—ã —É –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
    show_orders(call.message)


@bot.callback_query_handler(func=lambda call: call.data.startswith("place_order_"))
def place_order(call):
    user_id = call.message.chat.id
    order_id = call.data.split("_")[-1]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —ç—Ç–æ—Ç –∑–∞–∫–∞–∑
    if order_id not in user_orders:
        bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞: –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    order = user_orders[order_id]

    # –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫—É "–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å" (—Ç–æ–ª—å–∫–æ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤)
    keyboard = types.InlineKeyboardMarkup()
    if user_id in MANAGERS:
        keyboard.add(
            types.InlineKeyboardButton(
                "üìå –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data=f"update_status_{order_id}"
            )
        )

    bot.send_message(
        user_id,
        f"üì¢ *–ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω!*\n\n"
        f"üöó [{order['title']}]({order['link']})\n"
        f"üë§ –ö–ª–∏–µ–Ω—Ç: [{order['user_name']}](tg://user?id={order['user_id']})\n"
        f"üìå *–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:* {order['status']}",
        parse_mode="Markdown",
        reply_markup=keyboard,
    )

    bot.answer_callback_query(call.id, "‚úÖ –ó–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º!")


################## –ö–û–î –î–õ–Ø –°–¢–ê–¢–£–°–û–í


@bot.callback_query_handler(func=lambda call: call.data == "check_subscription")
def check_subscription(call):
    user_id = call.from_user.id
    chat_member = bot.get_chat_member(f"@{CHANNEL_USERNAME}", user_id)

    if chat_member.status in ["member", "administrator", "creator"]:
        bot.answer_callback_query(
            call.id, "‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞! –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞—Å—á—ë—Ç—ã."
        )
        # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        update_user_subscription(user_id, True)
    else:
        bot.answer_callback_query(
            call.id,
            "üö´ –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª! –û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.",
        )


def is_user_subscribed(user_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ –∫–∞–Ω–∞–ª."""
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/getChatMember?chat_id={CHANNEL_USERNAME}&user_id={user_id}"
    response = requests.get(url).json()
    return response.get("ok") and response.get("result", {}).get("status") in [
        "member",
        "administrator",
        "creator",
    ]


def print_message(message):
    print("\n\n##############")
    print(f"{message}")
    print("##############\n\n")
    return None


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–º–∞–Ω–¥ –º–µ–Ω—é
def set_bot_commands():
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞."""
    commands = [
        types.BotCommand("start", "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        types.BotCommand("exchange_rates", "–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç"),
        types.BotCommand("my_cars", "–ú–æ–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏"),
        types.BotCommand("orders", "–°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ (–î–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤)"),
        types.BotCommand("stats", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤)"),
    ]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º
    user_id = bot.get_me().id
    if user_id in MANAGERS:
        commands.extend(
            [
                types.BotCommand("orders", "–ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤ (–¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤)"),
            ]
        )

    bot.set_my_commands(commands)


def get_usdt_to_krw_rate():
    global usdt_to_krw_rate

    # URL –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞ USDT –∫ KRW
    url = "https://api.coinbase.com/v2/exchange-rates?currency=USDT"
    response = requests.get(url)
    data = response.json()

    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫—É—Ä—Å–∞ KRW
    krw_rate = data["data"]["rates"]["KRW"]
    usdt_to_krw_rate = float(krw_rate)

    print(f"–ö—É—Ä—Å USDT –∫ KRW -> {str(usdt_to_krw_rate)}")

    return float(krw_rate) + 8


def get_rub_to_krw_rate():
    global rub_to_krw_rate

    url = "https://cdn.jsdelivr.net/npm/@fawazahmed0/currency-api@latest/v1/currencies/rub.json"

    try:
        response = requests.get(url)
        response.raise_for_status()  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω—ã–π (–∫–æ–¥ 200)
        data = response.json()

        rub_to_krw = data["rub"]["krw"]  # –î–æ—Å—Ç–∞–µ–º –∫—É—Ä—Å —Ä—É–±–ª—è –∫ –≤–æ–Ω–µ
        rub_to_krw_rate = rub_to_krw

    except requests.RequestException as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–∞: {e}")
        return None


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç —Å API
def get_usd_to_krw_rate():
    global usd_to_krw_rate

    url = "https://api.manana.kr/exchange/rate/KRW/USD.json"

    try:
        response = requests.get(url)
        response.raise_for_status()  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∞
        data = response.json()

        # –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å –∏ –¥–æ–±–∞–≤–ª—è–µ–º +25 KRW
        usd_to_krw = data[0]["rate"] + 10
        usd_to_krw_rate = usd_to_krw

        print(f"–ö—É—Ä—Å USD ‚Üí KRW (—Å —É—á–µ—Ç–æ–º +25 KRW): {usd_to_krw_rate}")
    except requests.RequestException as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–∞ USD ‚Üí KRW: {e}")
        usd_to_krw_rate = None


def get_usd_to_rub_rate():
    global usd_to_rub_rate

    url = "https://www.cbr-xml-daily.ru/daily_json.js"

    try:
        response = requests.get(url)
        response.raise_for_status()  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∞
        data = response.json()

        # –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å USD ‚Üí RUB –∏–∑ –¶–ë –†–§
        usd_to_rub = data["Valute"]["USD"]["Value"]
        usd_to_rub_rate = usd_to_rub

        print(f"–ö—É—Ä—Å USD ‚Üí RUB: {usd_to_rub_rate}")
    except requests.RequestException as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–∞ USD ‚Üí RUB: {e}")
        usd_to_rub_rate = None


def get_currency_rates():
    global usd_rate, usd_to_krw_rate, usd_to_rub_rate

    print_message("–ü–û–õ–£–ß–ê–ï–ú –ö–£–†–°–´ –í–ê–õ–Æ–¢")

    # –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å USD ‚Üí KRW
    get_usd_to_krw_rate()

    # –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å USD ‚Üí RUB
    get_usd_to_rub_rate()

    rates_text = (
        f"USD ‚Üí KRW: <b>{usd_to_krw_rate:.2f} ‚Ç©</b>\n"
        f"USD ‚Üí RUB: <b>{usd_to_rub_rate:.2f} ‚ÇΩ</b>"
    )

    return rates_text


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /cbr
@bot.message_handler(commands=["exchange_rates"])
def cbr_command(message):
    try:
        rates_text = get_currency_rates()

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(
            types.InlineKeyboardButton(
                "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è", callback_data="calculate_another"
            )
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫—É—Ä—Å–∞–º–∏ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        bot.send_message(
            message.chat.id, rates_text, reply_markup=keyboard, parse_mode="HTML"
        )
    except Exception as e:
        bot.send_message(
            message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç: {e}")


# Main menu creation function
def main_menu():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
    keyboard.add(
        types.KeyboardButton(CALCULATE_CAR_TEXT),
    )
    keyboard.add(
        types.KeyboardButton("–ù–∞–ø–∏—Å–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—É"),
        types.KeyboardButton("–û –Ω–∞—Å"),
        types.KeyboardButton("Telegram-–∫–∞–Ω–∞–ª"),
        types.KeyboardButton("Instagram"),
        types.KeyboardButton("Tik-Tok"),
    )
    return keyboard


# Start command handler
@bot.message_handler(commands=["start"])
def send_welcome(message):
    get_currency_rates()

    user_first_name = message.from_user.first_name
    welcome_message = (
        f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user_first_name}!\n\n"
        "–Ø –±–æ—Ç –∫–æ–º–ø–∞–Ω–∏–∏ Quickxa. –Ø –ø–æ–º–æ–≥—É –≤–∞–º —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–Ω—Ä–∞–≤–∏–≤—à–µ–≥–æ—Å—è –≤–∞–º –∞–≤—Ç–æ–º–æ–±–∏–ª—è –∏–∑ –Æ–∂–Ω–æ–π –ö–æ—Ä–µ–∏ –¥–æ —Å—Ç—Ä–∞–Ω –°–ù–ì.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ."
    )

    # –õ–æ–≥–æ—Ç–∏–ø –∫–æ–º–ø–∞–Ω–∏–∏
    logo_url = "https://res.cloudinary.com/dt0nkqowc/image/upload/v1744621411/Quicxa/logo_geajtn.png"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥–æ—Ç–∏–ø –ø–µ—Ä–µ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    bot.send_photo(
        message.chat.id,
        photo=logo_url,
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    add_user(
        message.from_user.id,
        message.from_user.username,
        message.from_user.first_name,
        message.from_user.last_name,
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    bot.send_message(message.chat.id, welcome_message, reply_markup=main_menu())


# Error handling function
def send_error_message(message, error_text):
    global last_error_message_id

    # Remove previous error message if it exists
    if last_error_message_id.get(message.chat.id):
        try:
            bot.delete_message(message.chat.id, last_error_message_id[message.chat.id])
        except Exception as e:
            logging.error(f"Error deleting message: {e}")

    # Send new error message and store its ID
    error_message = bot.reply_to(message, error_text, reply_markup=main_menu())
    last_error_message_id[message.chat.id] = error_message.id
    logging.error(f"Error sent to user {message.chat.id}: {error_text}")


def get_car_info(url):
    global car_id_external, vehicle_no, vehicle_id, car_year, car_month

    if "fem.encar.com" in url:
        car_id_match = re.findall(r"\d+", url)
        car_id = car_id_match[0]
        car_id_external = car_id

        url = f"https://api.encar.com/v1/readside/vehicle/{car_id}"

        headers = {
            "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36",
            "Referer": "http://www.encar.com/",
            "Cache-Control": "max-age=0",
            "Connection": "keep-alive",
        }

        response = requests.get(url, headers=headers).json()

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ
        car_make = response["category"]["manufacturerEnglishName"]  # –ú–∞—Ä–∫–∞
        car_model = response["category"]["modelGroupEnglishName"]  # –ú–æ–¥–µ–ª—å
        car_trim = response["category"]["gradeDetailEnglishName"] or ""  # –ö–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è

        car_title = f"{car_make} {car_model} {car_trim}"  # –ó–∞–≥–æ–ª–æ–≤–æ–∫

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—é
        car_price = str(response["advertisement"]["price"])
        car_date = response["category"]["yearMonth"]
        year = car_date[2:4]
        month = car_date[4:]
        car_year = year
        car_month = month

        # –ü—Ä–æ–±–µ–≥ (—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ)
        mileage = response["spec"]["mileage"]
        formatted_mileage = f"{mileage:,} –∫–º"

        # –¢–∏–ø –ö–ü–ü
        transmission = response["spec"]["transmissionName"]
        formatted_transmission = "–ê–≤—Ç–æ–º–∞—Ç" if "Ïò§ÌÜ†" in transmission else "–ú–µ—Ö–∞–Ω–∏–∫–∞"

        car_engine_displacement = str(response["spec"]["displacement"])
        car_type = response["spec"]["bodyName"]

        # –°–ø–∏—Å–æ–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π (–±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 10)
        car_photos = [
            generate_encar_photo_url(photo["path"]) for photo in response["photos"][:10]
        ]
        car_photos = [url for url in car_photos if url]

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        vehicle_no = response["vehicleNo"]
        vehicle_id = response["vehicleId"]

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º
        formatted_car_date = f"01{month}{year}"
        formatted_car_type = "crossover" if car_type == "SUV" else "sedan"

        print_message(
            f"ID: {car_id}\nType: {formatted_car_type}\nDate: {formatted_car_date}\nCar Engine Displacement: {car_engine_displacement}\nPrice: {car_price} KRW"
        )

        return [
            car_price,
            car_engine_displacement,
            formatted_car_date,
            car_title,
            formatted_mileage,
            formatted_transmission,
            car_photos,
            year,
            month,
        ]
    elif "kbchachacha.com" in url:
        url = f"https://www.kbchachacha.com/public/car/detail.kbc?carSeq={car_id_external}"

        headers = {
            "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/133.0.0.0 Safari/537.36",
            "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7",
            "Accept-Language": "en,ru;q=0.9,en-CA;q=0.8,la;q=0.7,fr;q=0.6,ko;q=0.5",
            "Connection": "keep-alive",
        }

        response = requests.get(url=url, headers=headers)
        soup = BeautifulSoup(response.text, "html.parser")

        # –ù–∞—Ö–æ–¥–∏–º JSON –≤ <script type="application/ld+json">
        json_script = soup.find("script", {"type": "application/ld+json"})
        if json_script:
            json_data = json.loads(json_script.text.strip())

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            car_name = json_data.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–æ–¥–µ–ª—å")
            car_images = json_data.get("image", [])[:10]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 10 —Ñ–æ—Ç–æ
            car_price = json_data.get("offers", {}).get("price", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")

            # –ù–∞—Ö–æ–¥–∏–º —Ç–∞–±–ª–∏—Ü—É —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
            table = soup.find("table", {"class": "detail-info-table"})
            if table:
                rows = table.find_all("tr")

                # –î–æ—Å—Ç–∞—ë–º –¥–∞–Ω–Ω—ã–µ
                car_number = None
                car_year = None
                car_mileage = None
                car_fuel = None
                car_engine_displacement = None

                for row in rows:
                    headers = row.find_all("th")
                    values = row.find_all("td")

                    for th, td in zip(headers, values):
                        header_text = th.text.strip()
                        value_text = td.text.strip()

                        if header_text == "Ï∞®ÎüâÏ†ïÎ≥¥":  # –ù–æ–º–µ—Ä –º–∞—à–∏–Ω—ã
                            car_number = value_text
                        elif header_text == "Ïó∞Ïãù":  # –ì–æ–¥ –≤—ã–ø—É—Å–∫–∞
                            car_year = value_text
                        elif header_text == "Ï£ºÌñâÍ±∞Î¶¨":  # –ü—Ä–æ–±–µ–≥
                            car_mileage = value_text
                        elif header_text == "Ïó∞Î£å":  # –¢–æ–ø–ª–∏–≤–æ
                            car_fuel = value_text
                        elif header_text == "Î∞∞Í∏∞Îüâ":  # –û–±—ä–µ–º –¥–≤–∏–≥–∞—Ç–µ–ª—è
                            car_engine_displacement = value_text
            else:
                print("‚ùå –¢–∞–±–ª–∏—Ü–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

            car_info = {
                "name": car_name,
                "car_price": car_price,
                "images": car_images,
                "number": car_number,
                "year": car_year,
                "mileage": car_mileage,
                "fuel": car_fuel,
                "engine_volume": car_engine_displacement,
                "transmission": "Ïò§ÌÜ†",
            }

            return car_info
        else:
            print(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ JSON-–¥–∞–Ω–Ω—ã–µ –≤ <script type='application/ld+json'>"
            )
    elif "chutcha" in url:
        print("üîç –ü–∞—Ä—Å–∏–º Chutcha.net...")

        headers = {
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36",
            "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7",
            "Accept-Language": "en,ru;q=0.9,en-CA;q=0.8,la;q=0.7,fr;q=0.6,ko;q=0.5",
            "Referer": "https://web.chutcha.net/bmc/search?brandGroup=1&modelTree=%7B%7D&priceRange=0%2C0&mileage=0%2C0&year=&saleType=&accident=&fuel=&transmission=&region=&color=&option=&cpo=&theme=&sort=1&currPage=&carType=",
        }

        response = requests.get(url, headers=headers)

        soup = BeautifulSoup(response.text, "lxml")

        # Extract JSON data from <script type="application/ld+json">
        script_tag = soup.find("script", {"type": "application/json"})
        vehicle_data = None

        if not script_tag:
            return "Error: JSON data not found"

        try:
            data = json.loads(script_tag.string)
        except json.JSONDecodeError:
            return "Error: Failed to parse JSON"

        # –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∫ ldJson (—Å–æ–¥–µ—Ä–∂–∏—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—à–∏–Ω–µ)
        vehicle_data = (
            data.get("props", {})
            .get("pageProps", {})
            .get("dehydratedState", {})
            .get("queries", [])[0]
            .get("state", {})
            .get("data", {})
        )

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        img_list_data = vehicle_data.get("img_list", [])
        img_list = []
        for query in img_list_data:
            img_list.append(
                f"https://imgsc.chutcha.kr{query.get('img_path','').replace('.jpg', '_ori.jpg')}?s=1024x768&t=crop"
            )

        name = (
            vehicle_data.get("base_info", {}).get("brand_name", "")
            + " "
            + vehicle_data.get("base_info", {}).get("model_name", "")
            + " "
            + vehicle_data.get("base_info", {}).get("sub_model_name", "")
            + " "
            + vehicle_data.get("base_info", {}).get("grade_name", "")
        )
        car_price = vehicle_data.get("base_info", {}).get("plain_price", "")
        car_number = vehicle_data.get("base_info", {}).get("number_plate", "")
        car_year = vehicle_data.get("base_info", {}).get("first_reg_year", "")[2:]
        car_month = str(
            vehicle_data.get("base_info", {}).get("first_reg_month", "")
        ).zfill(2)
        car_mileage = vehicle_data.get("base_info", {}).get("plain_mileage", "")
        car_fuel = vehicle_data.get("base_info", {}).get("fuel_name", "")
        car_engine_displacement = vehicle_data.get("base_info", {}).get(
            "displacement", ""
        )
        car_transmission = vehicle_data.get("base_info", {}).get(
            "transmission_name", ""
        )

        # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å—Ç—Ä–∞—Ö–æ–≤—ã—Ö
        car_history = (
            vehicle_data.get("safe_info", {})
            .get("carhistory_safe", {})
            .get("insurance", {})
            .get("list", [])
        )

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—É–º–º —Å—Ç—Ä–∞—Ö–æ–≤—ã—Ö –≤—ã–ø–ª–∞—Ç
        own_damage_total = 0  # –í—ã–ø–ª–∞—Ç—ã –ø–æ —Ç–µ–∫—É—â–µ–º—É –∞–≤—Ç–æ
        other_damage_total = 0  # –í—ã–ø–ª–∞—Ç—ã –ø–æ –¥—Ä—É–≥–∏–º –∞–≤—Ç–æ

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–ø–ª–∞—Ç, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        if car_history or len(car_history.get("price", "")) > 0:
            for claim in car_history:
                claim_type = claim.get("type")
                claim_price = (
                    int(claim["price"])
                    if claim.get("price") and claim["price"].isdigit()
                    else 0
                )

                if claim_type == "1":  # –í—ã–ø–ª–∞—Ç—ã –ø–æ —Ç–µ–∫—É—â–µ–º—É –∞–≤—Ç–æ
                    own_damage_total += claim_price
                elif claim_type == "2":  # –í—ã–ø–ª–∞—Ç—ã –ø–æ –¥—Ä—É–≥–∏–º –∞–≤—Ç–æ
                    other_damage_total += claim_price

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–≥–æ JSON
        car_info = {
            "name": name,
            "car_price": car_price,
            "images": img_list,
            "number": car_number,
            "year": car_year,
            "month": car_month,
            "mileage": car_mileage,
            "fuel": car_fuel,
            "engine_volume": car_engine_displacement,
            "transmission": car_transmission,
            "insurance_claims": {
                "own_damage_total": own_damage_total if car_history else "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ",
                "other_damage_total": (
                    other_damage_total if car_history else "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ"
                ),
            },
        }

        return car_info


# Function to calculate the total cost
def calculate_cost(link, message):
    global car_data, car_id_external, car_month, car_year, krw_rub_rate, eur_rub_rate, rub_to_krw_rate, usd_rate, usdt_to_krw_rate

    get_currency_rates()
    get_rub_to_krw_rate()
    get_usdt_to_krw_rate()

    user_id = message.chat.id

    bot.send_message(
        message.chat.id,
        "‚úÖ –ü–æ–¥–≥—Ä—É–∂–∞—é –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å –≤–∞–ª—é—Ç –∏ –¥–µ–ª–∞—é —Ä–∞—Å—á—ë—Ç—ã. ‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ...",
        parse_mode="Markdown",
    )

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–ø–∏—Å–∫–µ FREE_ACCESS_USERS, –æ–Ω –ø–æ–ª—É—á–∞–µ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–µ —Ä–∞—Å—á—ë—Ç—ã
    if user_id in FREE_ACCESS_USERS:
        user_subscription = True
    else:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –≤ –ë–î
        user_subscription = check_user_subscription(user_id)

        # –ï—Å–ª–∏ –≤ –ë–î –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏ ‚Äì –ø—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ API
        if not user_subscription:
            user_subscription = is_user_subscribed(user_id)
            if user_subscription:
                update_user_subscription(user_id, True)  # ‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –≤ –ë–î

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—Å—á—ë—Ç–æ–≤
    user_calc_count = get_calculation_count(user_id)

    if user_calc_count >= 2 and not user_subscription:
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(
            types.InlineKeyboardButton(
                "üöÄ –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", url=f"https://t.me/{CHANNEL_USERNAME}"
            )
        )
        keyboard.add(
            types.InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="check_subscription")
        )

        bot.send_message(
            message.chat.id,
            "üö´ –£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Ä–∞—Å—á—ë—Ç—ã. –ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –æ—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É.",
            reply_markup=keyboard,
        )
        return

    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ —Ä–∞—Å—á—ë—Ç–æ–≤
    increment_calculation_count(user_id)

    print_message("–ó–ê–ü–†–û–° –ù–ê –†–ê–°–ß–Å–¢ –ê–í–¢–û–ú–û–ë–ò–õ–Ø")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ ID
    processing_message = bot.send_message(message.chat.id, "–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –¥–∞–Ω–Ω—ã–µ... ‚è≥")

    car_id = None
    car_title = ""

    if "fem.encar.com" in link:
        car_id_match = re.findall(r"\d+", link)
        if car_id_match:
            car_id = car_id_match[0]  # Use the first match of digits
            car_id_external = car_id
            link = f"https://fem.encar.com/cars/detail/{car_id}"
        else:
            send_error_message(message, "üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å carid –∏–∑ —Å—Å—ã–ª–∫–∏.")
            return

    elif "kbchachacha.com" in link or "m.kbchachacha.com" in link:
        parsed_url = urlparse(link)
        query_params = parse_qs(parsed_url.query)
        car_id = query_params.get("carSeq", [None])[0]

        if car_id:
            car_id_external = car_id
            link = f"https://www.kbchachacha.com/public/car/detail.kbc?carSeq={car_id}"
        else:
            send_error_message(message, "üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å carSeq –∏–∑ —Å—Å—ã–ª–∫–∏.")
            return

    else:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º carid —Å URL encar
        parsed_url = urlparse(link)
        query_params = parse_qs(parsed_url.query)
        car_id = query_params.get("carid", [None])[0]

    # –ï—Å–ª–∏ —Å—Å—ã–ª–∫–∞ —Å encar
    if "fem.encar.com" in link:
        result = get_car_info(link)
        (
            car_price,
            car_engine_displacement,
            formatted_car_date,
            car_title,
            formatted_mileage,
            formatted_transmission,
            car_photos,
            year,
            month,
        ) = result

        preview_link = f"https://fem.encar.com/cars/detail/{car_id}"

    # –ï—Å–ª–∏ —Å—Å—ã–ª–∫–∞ —Å kbchacha
    if "kbchachacha.com" in link:
        result = get_car_info(link)

        car_title = result["name"]

        match = re.search(r"(\d{2})ÎÖÑ(\d{2})Ïõî", result["year"])
        if match:
            car_year = match.group(1)
            car_month = match.group(2)  # –ü–æ–ª—É—á–∞–µ–º –¥–≤—É—Ö–∑–Ω–∞—á–Ω—ã–π –º–µ—Å—è—Ü
        else:
            car_year = "–ù–µ –Ω–∞–π–¥–µ–Ω–æ"
            car_month = "–ù–µ –Ω–∞–π–¥–µ–Ω–æ"

        month = car_month
        year = car_year

        car_engine_displacement = re.sub(r"[^\d]", "", result["engine_volume"])
        car_price = int(result["car_price"]) / 10000
        formatted_car_date = f"01{car_month}{match.group(1)}"
        formatted_mileage = result["mileage"]
        formatted_transmission = (
            "–ê–≤—Ç–æ–º–∞—Ç" if "Ïò§ÌÜ†" in result["transmission"] else "–ú–µ—Ö–∞–Ω–∏–∫–∞"
        )
        car_photos = result["images"]

        preview_link = (
            f"https://www.kbchachacha.com/public/car/detail.kbc?carSeq={car_id}"
        )

    if not car_price and car_engine_displacement and formatted_car_date:
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(
            types.InlineKeyboardButton(
                "–ù–∞–ø–∏—Å–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—É", url="https://t.me/HYT_TRADING_KR"
            )
        )
        keyboard.add(
            types.InlineKeyboardButton(
                "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥—Ä—É–≥–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è",
                callback_data="calculate_another",
            )
        )
        bot.send_message(
            message.chat.id, "–û—à–∏–±–∫–∞", parse_mode="Markdown", reply_markup=keyboard
        )
        bot.delete_message(message.chat.id, processing_message.message_id)
        return

    if car_price and car_engine_displacement and formatted_car_date:
        car_engine_displacement = int(car_engine_displacement)

        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        formatted_car_year = f"20{car_year}"
        engine_volume_formatted = f"{format_number(car_engine_displacement)} cc"

        age = calculate_age(int(formatted_car_year), car_month)

        age_formatted = (
            "–¥–æ 3 –ª–µ—Ç"
            if age == "0-3"
            else (
                "–æ—Ç 3 –¥–æ 5 –ª–µ—Ç"
                if age == "3-5"
                else "–æ—Ç 5 –¥–æ 7 –ª–µ—Ç" if age == "5-7" else "–æ—Ç 7 –ª–µ—Ç"
            )
        )

        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞–≤—Ç–æ –≤ —Ä—É–±–ª–∏
        price_krw = int(car_price) * 10000
        price_usd = price_krw / usd_to_krw_rate
        price_rub = price_usd * usd_to_rub_rate

        response = get_customs_fees(
            car_engine_displacement,
            price_krw,
            int(formatted_car_year),
            car_month,
            engine_type=1,
        )

        # –¢–∞–º–æ–∂–µ–Ω–Ω—ã–π —Å–±–æ—Ä
        customs_fee = clean_number(response["sbor"])
        customs_duty = clean_number(response["tax"])
        recycling_fee = clean_number(response["util"])

        # –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –±—Ä–æ–∫–µ—Ä—Å–∫–∏—Ö —É—Å–ª—É–≥
        broker_fee = 85000.00  # –ë—Ä–æ–∫–µ—Ä—Å–∫–∏–µ —É—Å–ª—É–≥–∏ (–°–í–• + –°–ë–ö–¢–° + –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è + –ø–µ—Ä–µ–≥–æ–Ω)

        # –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫–∏
        delivery_fee = (
            850.00 if car_engine_displacement < 2500 else 950.00
        )  # –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö
        delivery_fee_rub = delivery_fee * usd_to_rub_rate  # –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ —Ä—É–±–ª–∏

        # –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —É—Å–ª—É–≥–∏ –¥–∏–ª–µ—Ä–∞/–∞—É–∫—Ü–∏–æ–Ω–∞
        dealer_fee_krw = 440000  # –≤ –≤–æ–Ω–∞—Ö
        dealer_fee_usd = dealer_fee_krw / usd_to_krw_rate  # –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ –¥–æ–ª–ª–∞—Ä—ã
        dealer_fee_rub = dealer_fee_usd * usd_to_rub_rate  # –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ —Ä—É–±–ª–∏

        # –†–∞—Å—á–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –≤–æ –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫–µ
        total_cost_vladivostok = (
            price_rub  # —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞–≤—Ç–æ
            + customs_duty  # —Ç–∞–º–æ–∂–µ–Ω–Ω–∞—è –ø–æ—à–ª–∏–Ω–∞
            + customs_fee  # —Ç–∞–º–æ–∂–µ–Ω–Ω—ã–µ —Å–±–æ—Ä—ã
            + recycling_fee  # —É—Ç–∏–ª–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–±–æ—Ä
            + broker_fee  # –±—Ä–æ–∫–µ—Ä—Å–∫–∏–µ —É—Å–ª—É–≥–∏
            + delivery_fee_rub  # –¥–æ—Å—Ç–∞–≤–∫–∞ –ø–∞—Ä–æ–º–æ–º
        )

        # –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–æ –ú–æ—Å–∫–≤—ã
        moscow_delivery_fee = 180000.00  # –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–æ –ú–æ—Å–∫–≤—ã

        # –†–∞—Å—á–µ—Ç –ø–æ–ª–Ω–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π –¥–æ –ú–æ—Å–∫–≤—ã
        total_cost_moscow = total_cost_vladivostok + moscow_delivery_fee

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤ car_data –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –ø–µ—Ä–µ–¥–∞—á–∏ –≤ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—é
        car_data = {
            "title": car_title,
            "age": age_formatted,
            "registration_date": f"{month}/{year}",
            "mileage": formatted_mileage,
            "engine_volume": engine_volume_formatted,
            "transmission": formatted_transmission,
            "price_rub": price_rub,
            "price_usd": price_usd,
            "price_krw": price_krw,
            "dealer_fee_krw": dealer_fee_krw,
            "dealer_fee_usd": dealer_fee_usd,
            "dealer_fee_rub": dealer_fee_rub,
            "delivery_type": "—Å–µ–¥–∞–Ω" if car_engine_displacement < 2500 else "–∫—Ä–æ—Å—Å–æ–≤–µ—Ä",
            "delivery_fee_usd": delivery_fee,
            "delivery_fee_rub": delivery_fee_rub,
            "customs_duty": customs_duty,
            "customs_fee": customs_fee,
            "recycling_fee": recycling_fee,
            "broker_fee": broker_fee,
            "total_cost_vladivostok": total_cost_vladivostok,
            "moscow_delivery_fee": moscow_delivery_fee,
            "total_cost_moscow": total_cost_moscow,
            "usdt_to_krw_rate": usdt_to_krw_rate,
            "usd_to_rub_rate": usd_to_rub_rate,
            "usd_to_krw_rate": usd_to_krw_rate,
            "link": preview_link,
            "car_id": car_id_external,
            "engine_displacement": car_engine_displacement,
        }

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        total_cost_usd = price_usd
        total_cost_krw = price_krw
        total_cost_rub = total_cost_vladivostok

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        result_message = (
            f"{car_title}\n\n"
            f"–í–æ–∑—Ä–∞—Å—Ç: {age_formatted} (–¥–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {month}/{year})\n"
            f"–ü—Ä–æ–±–µ–≥: {formatted_mileage}\n"
            f"–û–±—ä—ë–º –¥–≤–∏–≥–∞—Ç–µ–ª—è: {engine_volume_formatted}\n"
            f"–ö–ü–ü: {formatted_transmission}\n\n"
            f"üá∞üá∑ –¶–µ–Ω–∞ –∞–≤—Ç–æ –≤ –∫–æ—Ä–µ–π—Å–∫–∏—Ö –≤–æ–Ω–∞—Ö: ‚Ç©{format_number(price_krw)}\n"
            f"üíµ –¶–µ–Ω–∞ –∞–≤—Ç–æ –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö: ${format_number(price_usd)}\n"
            f"üá∑üá∫ –¶–µ–Ω–∞ –∞–≤—Ç–æ –≤ —Ä—É–±–ª—è—Ö: {format_number(price_rub)} ‚ÇΩ\n"
            f"ü§ù –£—Å–ª—É–≥–∞ –¥–∏–ª–µ—Ä–∞/–∞—É–∫—Ü–∏–æ–Ω–∞ –ø—Ä–∏ –≤—ã–∫—É–ø–µ –∞–≤—Ç–æ –≤ –ö–æ—Ä–µ–µ: 440.000‚Ç©/$\n"
            f"üö¢ –ó–∞—Ç—Ä–∞—Ç—ã –Ω–∞ –ø–µ—Ä–µ–≤–æ–∑–∫—É –∞–≤—Ç–æ –ø–æ –ö–æ—Ä–µ–µ; –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏ –¥–æ—Å—Ç–∞–≤–∫–∞ –ø–∞—Ä–æ–º–æ–º (–º–µ—Ç–æ–¥–æ–º Ro-Ro) –¥–æ –≥. –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫: {'—Å–µ–¥–∞–Ω- 850.00$' if car_engine_displacement < 2500 else '–∫—Ä–æ—Å–æ–≤–µ—Ä-950.00$'}\n"
            f"üí≥ –°—É–º–º–∞ –≤ Invoice –¥–ª—è –æ–ø–ª–∞—Ç—ã –≤ –±–∞–Ω–∫–µ: ‚Ç©{format_number(price_krw)}\n"
            f"üõÉ –¢–∞–º–æ–∂–µ–Ω–Ω–∞—è –ø–æ—à–ª–∏–Ω–∞: {format_number(customs_duty)} ‚ÇΩ\n"
            f"üìù –¢–∞–º–æ–∂–µ–Ω–Ω—ã–µ —Å–±–æ—Ä—ã: {format_number(customs_fee)} ‚ÇΩ\n"
            f"üóë –£—Ç–∏–ª–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–±–æ—Ä: {format_number(recycling_fee)} ‚ÇΩ\n"
            f"üíº –ë—Ä–æ–∫–µ—Ä—Å–∫–∏–µ —É—Å–ª—É–≥–∏ (–°–í–• + –°–ë–ö–¢–° + –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è + –ø–µ—Ä–µ–≥–æ–Ω): 85 000.00 ‚ÇΩ\n"
            f"üí∞ –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è –≤ –≥. –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫: {format_number(total_cost_vladivostok)} ‚ÇΩ\n"
            f"üöó –°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–æ –ú–æ—Å–∫–≤—ã: –æ—Ç 180 000.0 ‚ÇΩ\n\n"
            f"üíµ <b>–ö—É—Ä—Å USDT –∫ –í–æ–Ω–µ: ‚Ç©{format_number(usdt_to_krw_rate)}</b>\n\n"
            f"üîó <a href='{preview_link}'>–°—Å—ã–ª–∫–∞ –Ω–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—å</a>\n\n"
            "–ï—Å–ª–∏ –¥–∞–Ω–Ω–æ–µ –∞–≤—Ç–æ –ø–æ–ø–∞–¥–∞–µ—Ç –ø–æ–¥ —Å–∞–Ω–∫—Ü–∏–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —É—Ç–æ—á–Ω–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –≤–∞—à—É —Å—Ç—Ä–∞–Ω—É —É –Ω–∞—à–∏—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤:\n\n"
            f"‚ñ™Ô∏è +82-10-7626-1999\n"
            f"‚ñ™Ô∏è +82-10-7934-6603\n"
            "üîó <a href='https://t.me/HYT_Trading'>–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª</a>\n"
        )

        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –¥–∞–ª—å–Ω–µ–π—à–∏–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(
            types.InlineKeyboardButton("–î–µ—Ç–∞–ª–∏ —Ä–∞—Å—á—ë—Ç–∞", callback_data="detail")
        )

        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
        keyboard.add(
            types.InlineKeyboardButton(
                "‚≠ê –î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ",
                callback_data=f"add_favorite_{car_id_external}",
            )
        )

        if "fem.encar.com" in link:
            keyboard.add(
                types.InlineKeyboardButton(
                    "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –û—Ç—á—ë—Ç –æ–± –ê–≤—Ç–æ–º–æ–±–∏–ª–µ", callback_data="technical_card"
                )
            )
            keyboard.add(
                types.InlineKeyboardButton(
                    "–í—ã–ø–ª–∞—Ç—ã –ø–æ –î–¢–ü",
                    callback_data="technical_report",
                )
            )
        keyboard.add(
            types.InlineKeyboardButton(
                "–ù–∞–ø–∏—Å–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—É", url="https://t.me/HYT_TRADING_KR"
            )
        )
        keyboard.add(
            types.InlineKeyboardButton(
                "–†–∞—Å—á—ë—Ç –¥—Ä—É–≥–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è",
                callback_data="calculate_another",
            )
        )
        keyboard.add(
            types.InlineKeyboardButton(
                "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                callback_data="main_menu",
            )
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ 10 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
        media_group = []
        for photo_url in sorted(car_photos):
            try:
                response = requests.get(photo_url)
                if response.status_code == 200:
                    photo = BytesIO(response.content)  # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ—Ç–æ –≤ –ø–∞–º—è—Ç—å
                    media_group.append(
                        types.InputMediaPhoto(photo)
                    )  # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫

                    # –ï—Å–ª–∏ –Ω–∞–±—Ä–∞–ª–∏ 10 —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–ª—å–±–æ–º
                    if len(media_group) == 10:
                        bot.send_media_group(message.chat.id, media_group)
                        media_group.clear()  # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –≥—Ä—É–ø–ø—ã
                else:
                    print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ: {photo_url} - {response.status_code}")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ {photo_url}: {e}")

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —Ñ–æ—Ç–æ, –µ—Å–ª–∏ –∏—Ö –º–µ–Ω—å—à–µ 10
        if media_group:
            bot.send_media_group(message.chat.id, media_group)

        car_data["car_id"] = car_id
        car_data["name"] = car_title
        car_data["images"] = car_photos if isinstance(car_photos, list) else []
        car_data["link"] = preview_link
        car_data["year"] = year
        car_data["month"] = month
        car_data["mileage"] = formatted_mileage
        car_data["engine_volume"] = car_engine_displacement
        car_data["transmission"] = formatted_transmission
        car_data["car_price"] = price_krw
        car_data["user_name"] = message.from_user.username
        car_data["first_name"] = message.from_user.first_name
        car_data["last_name"] = message.from_user.last_name

        bot.send_message(
            message.chat.id,
            result_message,
            parse_mode="HTML",
            reply_markup=keyboard,
        )

        bot.delete_message(
            message.chat.id, processing_message.message_id
        )  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–µ—Ä–µ–¥–∞—á–µ –¥–∞–Ω–Ω—ã—Ö –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É

    else:
        send_error_message(
            message,
            "üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Å—ã–ª–∫—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
        )
        bot.delete_message(message.chat.id, processing_message.message_id)


# Function to get insurance total
def get_insurance_total():
    global car_id_external, vehicle_no, vehicle_id

    print_message("[–ó–ê–ü–†–û–°] –¢–ï–•–ù–ò–ß–ï–°–ö–ò–ô –û–¢–ß√ã–¢ –û–ë –ê–í–¢–û–ú–û–ë–ò–õ–ï")

    formatted_vehicle_no = urllib.parse.quote(str(vehicle_no).strip())
    url = f"https://api.encar.com/v1/readside/record/vehicle/{str(vehicle_id)}/open?vehicleNo={formatted_vehicle_no}"

    try:
        headers = {
            "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36",
            "Referer": "http://www.encar.com/",
            "Cache-Control": "max-age=0",
            "Connection": "keep-alive",
        }

        response = requests.get(url, headers)
        json_response = response.json()

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        damage_to_my_car = json_response["myAccidentCost"]
        damage_to_other_car = json_response["otherAccidentCost"]

        print(
            f"–í—ã–ø–ª–∞—Ç—ã –ø–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–º—É –∞–≤—Ç–æ–º–æ–±–∏–ª—é: {format_number(damage_to_my_car)}"
        )
        print(f"–í—ã–ø–ª–∞—Ç—ã –¥—Ä—É–≥–æ–º—É –∞–≤—Ç–æ–º–æ–±–∏–ª—é: {format_number(damage_to_other_car)}")

        return [format_number(damage_to_my_car), format_number(damage_to_other_car)]

    except Exception as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return ["", ""]


def get_technical_card():
    global vehicle_id

    url = f"https://api.encar.com/v1/readside/inspection/vehicle/{vehicle_id}"

    try:
        headers = {
            "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36",
            "Referer": "http://www.encar.com/",
            "Cache-Control": "max-age=0",
            "Connection": "keep-alive",
        }

        response = requests.get(url, headers=headers)
        json_response = response.json() if response.status_code == 200 else None

        if not json_response:
            return "‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Å—ã–ª–∫—É."

        master = json_response.get("master", {}).get("detail", {})
        if not master:
            return "‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–º —Å—Ä–µ–¥—Å—Ç–≤–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."

        vehicle_id = json_response.get("vehicleId", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
        model_year = master.get("modelYear", "–ù–µ —É–∫–∞–∑–∞–Ω–æ").strip()
        vin = master.get("vin", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
        first_registration_date = master.get("firstRegistrationDate", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
        registration_date = master.get("registrationDate", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
        mileage = f"{int(master.get('mileage', 0)):,}".replace(",", " ") + " –∫–º"
        transmission = master.get("transmissionType", {}).get("title", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
        motor_type = master.get("motorType", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
        color = master.get("colorType", {}).get("title", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
        accident = "‚ùå –ù–µ—Ç" if not master.get("accdient", False) else "‚ö†Ô∏è –î–∞"
        simple_repair = "‚ùå –ù–µ—Ç" if not master.get("simpleRepair", False) else "‚ö†Ô∏è –î–∞"
        waterlog = "‚ùå –ù–µ—Ç" if not master.get("waterlog", False) else "‚ö†Ô∏è –î–∞"
        tuning = "‚ùå –ù–µ—Ç" if not master.get("tuning", False) else "‚ö†Ô∏è –î–∞"
        car_state = master.get("carStateType", {}).get("title", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")

        # –ü–µ—Ä–µ–≤–æ–¥—ã
        translations = {
            "Ïò§ÌÜ†": "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è",
            "ÏàòÎèô": "–ú–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∞—è",
            "ÏûêÍ∞ÄÎ≥¥Ï¶ù": "–°–æ–±—Å—Ç–≤–µ–Ω–Ω–∞—è –≥–∞—Ä–∞–Ω—Ç–∏—è",
            "ÏñëÌò∏": "–•–æ—Ä–æ—à–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ",
            "Î¨¥Ï±ÑÏÉâ": "–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π",
            "Ï†ÅÏ†ï": "–í –Ω–æ—Ä–º–µ",
            "ÏóÜÏùå": "–ù–µ—Ç",
            "ÎàÑÏú†": "–£—Ç–µ—á–∫–∞",
            "Î∂àÎüâ": "–ù–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç—å",
            "ÎØ∏ÏÑ∏ÎàÑÏú†": "–ù–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–∞—è —É—Ç–µ—á–∫–∞",
            "ÏñëÌò∏": "–í —Ö–æ—Ä–æ—à–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏",
            "Ï£ºÏùò": "–¢—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è",
            "ÍµêÌôò": "–ó–∞–º–µ–Ω–∞",
            "Î∂ÄÏ°±": "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å",
            "Ï†ïÏÉÅ": "–ù–æ—Ä–º–∞–ª—å–Ω–æ",
            "ÏûëÎèôÎ∂àÎüâ": "–ù–µ–∏—Å–ø—Ä–∞–≤–Ω–∞",
            "ÏÜåÏùå": "–®—É–º",
            "ÏûëÎèôÏñëÌò∏": "–†–∞–±–æ—Ç–∞–µ—Ç —Ö–æ—Ä–æ—à–æ",
        }

        def translate(value):
            return translations.get(value, value)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —É–∑–ª–æ–≤
        inners = json_response.get("inners", [])
        nodes_status = {}

        for inner in inners:
            for child in inner.get("children", []):
                type_code = child.get("type", {}).get("code", "")
                status_type = child.get("statusType")
                status = (
                    translate(status_type.get("title", "–ù–µ —É–∫–∞–∑–∞–Ω–æ"))
                    if status_type
                    else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
                )

                nodes_status[type_code] = status

        output = (
            f"üöó <b>–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ</b>\n"
            f"	‚Ä¢	ID –∞–≤—Ç–æ–º–æ–±–∏–ª—è: {vehicle_id}\n"
            f"	‚Ä¢	–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞: {model_year}\n"
            f"	‚Ä¢	–î–∞—Ç–∞ –ø–µ—Ä–≤–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {first_registration_date}\n"
            f"	‚Ä¢	–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ —Å–∏—Å—Ç–µ–º–µ: {registration_date}\n"
            f"	‚Ä¢	VIN: {vin}\n"
            f"	‚Ä¢	–ü—Ä–æ–±–µ–≥: {mileage}\n"
            f"	‚Ä¢	–¢–∏–ø —Ç—Ä–∞–Ω—Å–º–∏—Å—Å–∏–∏: {translate(transmission)} ({transmission})\n"
            f"	‚Ä¢	–¢–∏–ø –¥–≤–∏–≥–∞—Ç–µ–ª—è: {motor_type}\n"
            f"	‚Ä¢	–°–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è: {translate(car_state)} ({car_state})\n"
            f"	‚Ä¢	–¶–≤–µ—Ç: {translate(color)} ({color})\n"
            f"	‚Ä¢	–¢—é–Ω–∏–Ω–≥: {tuning}\n"
            f"	‚Ä¢	–ê–≤—Ç–æ–º–æ–±–∏–ª—å –ø–æ–ø–∞–¥–∞–ª –≤ –î–¢–ü: {accident}\n"
            f"	‚Ä¢	–ë—ã–ª–∏ –ª–∏ –ø—Ä–æ—Å—Ç—ã–µ —Ä–µ–º–æ–Ω—Ç—ã: {simple_repair}\n"
            f"	‚Ä¢	–ó–∞—Ç–æ–ø–ª–µ–Ω–∏–µ: {waterlog}\n"
            f"\n‚∏ª\n\n"
            f"‚öôÔ∏è <b>–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —É–∑–ª–æ–≤</b>\n"
            f"	‚Ä¢	–î–≤–∏–≥–∞—Ç–µ–ª—å: ‚úÖ {nodes_status.get('s001', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"	‚Ä¢	–¢—Ä–∞–Ω—Å–º–∏—Å—Å–∏—è: ‚úÖ {nodes_status.get('s002', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"	‚Ä¢	–†–∞–±–æ—Ç–∞ –¥–≤–∏–≥–∞—Ç–µ–ª—è –Ω–∞ —Ö–æ–ª–æ—Å—Ç–æ–º —Ö–æ–¥—É: ‚úÖ {nodes_status.get('s003', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"	‚Ä¢	–£—Ç–µ—á–∫–∞ –º–∞—Å–ª–∞ –¥–≤–∏–≥–∞—Ç–µ–ª—è: {'‚ùå –ù–µ—Ç' if nodes_status.get('s004', 'ÏóÜÏùå') == '–ù–µ—Ç' else '‚ö†Ô∏è –î–∞'} ({nodes_status.get('s004', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')})\n"
            f"	‚Ä¢	–£—Ä–æ–≤–µ–Ω—å –º–∞—Å–ª–∞ –≤ –¥–≤–∏–≥–∞—Ç–µ–ª–µ: ‚úÖ {nodes_status.get('s005', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"	‚Ä¢	–£—Ç–µ—á–∫–∞ –æ—Ö–ª–∞–∂–¥–∞—é—â–µ–π –∂–∏–¥–∫–æ—Å—Ç–∏: {'‚ùå –ù–µ—Ç' if nodes_status.get('s006', 'ÏóÜÏùå') == '–ù–µ—Ç' else '‚ö†Ô∏è –î–∞'} ({nodes_status.get('s006', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')})\n"
            f"	‚Ä¢	–£—Ä–æ–≤–µ–Ω—å –æ—Ö–ª–∞–∂–¥–∞—é—â–µ–π –∂–∏–¥–∫–æ—Å—Ç–∏: ‚úÖ {nodes_status.get('s007', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"	‚Ä¢	–°–∏—Å—Ç–µ–º–∞ –ø–æ–¥–∞—á–∏ —Ç–æ–ø–ª–∏–≤–∞: ‚úÖ {nodes_status.get('s008', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"	‚Ä¢	–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∫–æ—Ä–æ–±–∫–∞ –ø–µ—Ä–µ–¥–∞—á: ‚úÖ {nodes_status.get('s009', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"	‚Ä¢	–£—Ç–µ—á–∫–∞ –º–∞—Å–ª–∞ –≤ –ê–ö–ü–ü: {'‚ùå –ù–µ—Ç' if nodes_status.get('s010', 'ÏóÜÏùå') == '–ù–µ—Ç' else '‚ö†Ô∏è –î–∞'} ({nodes_status.get('s010', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')})\n"
            f"	‚Ä¢	–†–∞–±–æ—Ç–∞ –ê–ö–ü–ü –Ω–∞ —Ö–æ–ª–æ—Å—Ç–æ–º —Ö–æ–¥—É: ‚úÖ {nodes_status.get('s011', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"	‚Ä¢	–°–∏—Å—Ç–µ–º–∞ —Å—Ü–µ–ø–ª–µ–Ω–∏—è: ‚úÖ {nodes_status.get('s012', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"	‚Ä¢	–ö–∞—Ä–¥–∞–Ω–Ω—ã–π –≤–∞–ª –∏ –ø–æ–¥—à–∏–ø–Ω–∏–∫–∏: ‚úÖ {nodes_status.get('s013', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"	‚Ä¢	–†–µ–¥—É–∫—Ç–æ—Ä: ‚úÖ {nodes_status.get('s014', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        )

        return output

    except requests.RequestException as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}"


# Callback query handler
@bot.callback_query_handler(func=lambda call: True)
def handle_callback_query(call):
    global car_data, car_id_external, usd_rate

    if call.data.startswith("detail"):
        print_message("[–ó–ê–ü–†–û–°] –î–ï–¢–ê–õ–ò–ó–ê–¶–ò–Ø –†–ê–°–ß√ã–¢–ê")

        detail_message = (
            f"<i>–ü–ï–†–í–ê–Ø –ß–ê–°–¢–¨ –û–ü–õ–ê–¢–´ (–ö–û–†–ï–Ø)</i>:\n\n"
            f"–°—Ç–æ–∏–º–æ—Å—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è:\n<b>${format_number(car_data['car_price_usd'])}</b> | <b>‚Ç©{format_number(car_data['car_price_krw'])}</b> | <b>{format_number(car_data['car_price_rub'])} ‚ÇΩ</b>\n\n"
            f"–£—Å–ª—É–≥–∏ —Ñ–∏—Ä–º—ã (–ø–æ–∏—Å–∫ –∏ –ø–æ–¥–±–æ—Ä –∞–≤—Ç–æ, –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è, 3 –æ—Å–º–æ—Ç—Ä–∞):\n<b>${format_number(car_data['company_fees_usd'])}</b> | <b>‚Ç©{format_number(car_data['company_fees_krw'])}</b> | <b>{format_number(car_data['company_fees_rub'])} ‚ÇΩ</b>\n\n"
            f"–§—Ä–∞—Ö—Ç (–æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ –ø–æ—Ä—Ç, –¥–æ—Å—Ç–∞–≤–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –Ω–∞ –±–∞–∑—É, –æ–ø–ª–∞—Ç–∞ —Å—É–¥–Ω–∞):\n<b>${format_number(car_data['freight_korea_usd'])}</b> | <b>‚Ç©{format_number(car_data['freight_korea_krw'])}</b> | <b>{format_number(car_data['freight_korea_rub'])} ‚ÇΩ</b>\n\n\n"
            f"–î–∏–ª–µ—Ä—Å–∫–∏–π —Å–±–æ—Ä:\n<b>${format_number(car_data['dealer_korea_usd'])}</b> | <b>‚Ç©{format_number(car_data['dealer_korea_krw'])}</b> | <b>{format_number(car_data['dealer_korea_rub'])} ‚ÇΩ</b>\n\n"
            f"<i>–í–¢–û–†–ê–Ø –ß–ê–°–¢–¨ –û–ü–õ–ê–¢–´ (–†–û–°–°–ò–Ø)</i>:\n\n"
            f"–ë—Ä–æ–∫–µ—Ä-–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫:\n<b>${format_number(car_data['broker_russia_usd'])}</b> | <b>‚Ç©{format_number(car_data['broker_russia_krw'])}</b> | <b>{format_number(car_data['broker_russia_rub'])} ‚ÇΩ</b>\n\n\n"
            f"–ï–¥–∏–Ω–∞—è —Ç–∞–º–æ–∂–µ–Ω–Ω–∞—è —Å—Ç–∞–≤–∫–∞:\n<b>${format_number(car_data['customs_duty_usd'])}</b> | <b>‚Ç©{format_number(car_data['customs_duty_krw'])}</b> | <b>{format_number(car_data['customs_duty_rub'])} ‚ÇΩ</b>\n\n"
            f"–¢–∞–º–æ–∂–µ–Ω–Ω–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ:\n<b>${format_number(car_data['customs_fee_usd'])}</b> | <b>‚Ç©{format_number(car_data['customs_fee_krw'])}</b> | <b>{format_number(car_data['customs_fee_rub'])} ‚ÇΩ</b>\n\n"
            f"–£—Ç–∏–ª–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–±–æ—Ä:\n<b>${format_number(car_data['util_fee_usd'])}</b> | <b>‚Ç©{format_number(car_data['util_fee_krw'])}</b> | <b>{format_number(car_data['util_fee_rub'])} ‚ÇΩ</b>\n\n\n"
            f"–ü–µ—Ä–µ–≥–æ–Ω –≤–æ –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫–µ:\n<b>${format_number(car_data['vladivostok_transfer_usd'])}</b> | <b>‚Ç©{format_number(car_data['vladivostok_transfer_krw'])}</b> | <b>{format_number(car_data['vladivostok_transfer_rub'])} ‚ÇΩ</b>\n\n"
            f"–ê–≤—Ç–æ–≤–æ–∑ –¥–æ –ú–æ—Å–∫–≤—ã:\n<b>${format_number(car_data['moscow_transporter_usd'])}</b> | <b>‚Ç©{format_number(car_data['moscow_transporter_krw'])}</b> | <b>{format_number(car_data['moscow_transporter_rub'])} ‚ÇΩ</b>\n\n"
            f"–ò—Ç–æ–≥–æ –ø–æ–¥ –∫–ª—é—á: \n<b>${format_number(car_data['total_cost_usd'])}</b> | <b>‚Ç©{format_number(car_data['total_cost_krw'])}</b> | <b>{format_number(car_data['total_cost_rub'])} ‚ÇΩ</b>\n\n"
            f"<b>–î–æ—Å—Ç–∞–≤–∫—É –¥–æ –≤–∞—à–µ–≥–æ –≥–æ—Ä–æ–¥–∞ —É—Ç–æ—á–Ω—è–π—Ç–µ —É –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤:</b>\n"
            # f"‚ñ™Ô∏è +82 10-5128-8082 (–ê–ª–µ–∫—Å–∞–Ω–¥—Ä)\n\n"
            f"‚ñ™Ô∏è +82-10-7934-6603\n"
        )

        # Inline buttons for further actions
        keyboard = types.InlineKeyboardMarkup()

        if call.data.startswith("detail_manual"):
            keyboard.add(
                types.InlineKeyboardButton(
                    "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥—Ä—É–≥–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è",
                    callback_data="calculate_another_manual",
                )
            )
        else:
            keyboard.add(
                types.InlineKeyboardButton(
                    "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥—Ä—É–≥–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è",
                    callback_data="calculate_another",
                )
            )

        keyboard.add(
            types.InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
        )

        bot.send_message(
            call.message.chat.id,
            detail_message,
            parse_mode="HTML",
            reply_markup=keyboard,
        )

    elif call.data == "technical_card":
        print_message("[–ó–ê–ü–†–û–°] –¢–ï–•–ù–ò–ß–ï–°–ö–ê–Ø –û–¢–ß√ã–¢ –û–ë –ê–í–¢–û–ú–û–ë–ò–õ–ï")

        technical_card_output = get_technical_card()

        bot.send_message(
            call.message.chat.id,
            "–ó–∞–ø—Ä–∞—à–∏–≤–∞—é –æ—Ç—á—ë—Ç –ø–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ ‚è≥",
        )

        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(
            types.InlineKeyboardButton(
                "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥—Ä—É–≥–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è",
                callback_data="calculate_another",
            )
        )
        keyboard.add(
            types.InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
        )
        # keyboard.add(
        #     types.InlineKeyboardButton(
        #         "–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", url="https://t.me/HYT_TRADING_KR"
        #     )
        # )

        bot.send_message(
            call.message.chat.id,
            technical_card_output,
            parse_mode="HTML",
            reply_markup=keyboard,
        )

    elif call.data == "technical_report":
        bot.send_message(
            call.message.chat.id,
            "–ó–∞–ø—Ä–∞—à–∏–≤–∞—é –æ—Ç—á—ë—Ç –ø–æ –î–¢–ü. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ ‚è≥",
        )

        # Retrieve insurance information
        insurance_info = get_insurance_total()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–∫–∏
        if (
            insurance_info is None
            or "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö" in insurance_info[0]
            or "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö" in insurance_info[1]
        ):
            error_message = (
                "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Å—Ç—Ä–∞—Ö–æ–≤—ã—Ö –≤—ã–ø–ª–∞—Ç–∞—Ö. \n\n"
                f'<a href="https://fem.encar.com/cars/report/accident/{car_id_external}">üîó –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç—Ä–∞—Ö–æ–≤—É—é –∏—Å—Ç–æ—Ä–∏—é –≤—Ä—É—á–Ω—É—é üîó</a>\n\n\n'
                f"<b>–ù–∞–π–¥–∏—Ç–µ –¥–≤–µ —Å—Ç—Ä–æ–∫–∏:</b>\n\n"
                f"Î≥¥ÌóòÏÇ¨Í≥† Ïù¥Î†• (ÎÇ¥Ï∞® ÌîºÌï¥) - –í—ã–ø–ª–∞—Ç—ã –ø–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–º—É –∞–≤—Ç–æ–º–æ–±–∏–ª—é\n"
                f"Î≥¥ÌóòÏÇ¨Í≥† Ïù¥Î†• (ÌÉÄÏ∞® Í∞ÄÌï¥) - –í—ã–ø–ª–∞—Ç—ã –¥—Ä—É–≥–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –î–¢–ü"
            )

            # Inline buttons for further actions
            keyboard = types.InlineKeyboardMarkup()
            keyboard.add(
                types.InlineKeyboardButton(
                    "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥—Ä—É–≥–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è",
                    callback_data="calculate_another",
                )
            )
            keyboard.add(
                types.InlineKeyboardButton(
                    "–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", url="https://t.me/HYT_TRADING_KR"
                )
            )

            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
            bot.send_message(
                call.message.chat.id,
                error_message,
                parse_mode="HTML",
                reply_markup=keyboard,
            )
        else:
            current_car_insurance_payments = (
                "0" if len(insurance_info[0]) == 0 else insurance_info[0]
            )
            other_car_insurance_payments = (
                "0" if len(insurance_info[1]) == 0 else insurance_info[1]
            )

            # Construct the message for the technical report
            tech_report_message = (
                f"–°—Ç—Ä–∞—Ö–æ–≤—ã–µ –≤—ã–ø–ª–∞—Ç—ã –ø–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–º—É –∞–≤—Ç–æ–º–æ–±–∏–ª—é: \n<b>{current_car_insurance_payments} ‚Ç©</b>\n\n"
                f"–°—Ç—Ä–∞—Ö–æ–≤—ã–µ –≤—ã–ø–ª–∞—Ç—ã –¥—Ä—É–≥–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –î–¢–ü: \n<b>{other_car_insurance_payments} ‚Ç©</b>\n\n"
                f'<a href="https://fem.encar.com/cars/report/inspect/{car_id_external}">üîó –°—Å—ã–ª–∫–∞ –Ω–∞ —Å—Ö–µ–º—É –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π –∫—É–∑–æ–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ üîó</a>'
            )

            # Inline buttons for further actions
            keyboard = types.InlineKeyboardMarkup()
            keyboard.add(
                types.InlineKeyboardButton(
                    "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥—Ä—É–≥–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è",
                    callback_data="calculate_another",
                )
            )
            keyboard.add(
                types.InlineKeyboardButton(
                    "–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", url="https://t.me/HYT_TRADING_KR"
                )
            )
            keyboard.add(
                types.InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
            )

            bot.send_message(
                call.message.chat.id,
                tech_report_message,
                parse_mode="HTML",
                reply_markup=keyboard,
            )

    elif call.data == "calculate_another":
        bot.send_message(
            call.message.chat.id,
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—å —Å —Å–∞–π—Ç–∞ (encar.com, kbchachacha.com, web.chutcha.net)",
        )

    elif call.data == "calculate_another_manual":
        msg = bot.send_message(
            call.message.chat.id,
            "–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª—è",
        )
        bot.register_next_step_handler(msg, process_car_age)

    elif call.data == "main_menu":
        bot.send_message(call.message.chat.id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu())


def process_car_age(message):
    user_input = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–≤–æ–¥
    age_mapping = {
        "–î–æ 3 –ª–µ—Ç": "0-3",
        "–û—Ç 3 –¥–æ 5 –ª–µ—Ç": "3-5",
        "–û—Ç 5 –¥–æ 7 –ª–µ—Ç": "5-7",
        "–ë–æ–ª–µ–µ 7 –ª–µ—Ç": "7-0",
    }

    if user_input not in age_mapping:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç –∞–≤—Ç–æ
    user_data[message.chat.id] = {"car_age": age_mapping[user_input]}

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–±—ä–µ–º –¥–≤–∏–≥–∞—Ç–µ–ª—è
    bot.send_message(
        message.chat.id,
        "–í–≤–µ–¥–∏—Ç–µ –æ–±—ä–µ–º –¥–≤–∏–≥–∞—Ç–µ–ª—è –≤ —Å–º¬≥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1998):",
    )
    bot.register_next_step_handler(message, process_engine_volume)


def process_engine_volume(message):
    user_input = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–æ —á–∏—Å–ª–æ
    if not user_input.isdigit():
        bot.send_message(
            message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ–±—ä–µ–º –¥–≤–∏–≥–∞—Ç–µ–ª—è –≤ —Å–º¬≥."
        )
        bot.register_next_step_handler(message, process_engine_volume)
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä–µ–º –¥–≤–∏–≥–∞—Ç–µ–ª—è
    user_data[message.chat.id]["engine_volume"] = int(user_input)

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞–≤—Ç–æ
    bot.send_message(
        message.chat.id,
        "–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è –≤ –∫–æ—Ä–µ–π—Å–∫–∏—Ö –≤–æ–Ω–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 15000000):",
    )
    bot.register_next_step_handler(message, process_car_price)


def process_car_price(message):
    global usd_to_krw_rate, usd_to_rub_rate

    user_input = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–æ —á–∏—Å–ª–æ
    if not user_input.isdigit():
        bot.send_message(
            message.chat.id,
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è –≤ –≤–æ–Ω–∞—Ö.",
        )
        bot.register_next_step_handler(message, process_car_price)
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è
    user_data[message.chat.id]["car_price_krw"] = int(user_input)

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if message.chat.id not in user_data:
        user_data[message.chat.id] = {}

    if "car_age" not in user_data[message.chat.id]:
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ –≤–æ–∑—Ä–∞—Å—Ç –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω

    age_group = user_data[message.chat.id]["car_age"]
    engine_volume = user_data[message.chat.id]["engine_volume"]
    car_price_krw = user_data[message.chat.id]["car_price_krw"]

    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è –≤ USD –∏ RUB
    price_usd = car_price_krw / usd_to_krw_rate
    price_rub = price_usd * usd_to_rub_rate

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–∞–º–æ–∂–µ–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏
    customs_fees = get_customs_fees_manual(engine_volume, car_price_krw, age_group)

    customs_duty = clean_number(customs_fees["tax"])  # –¢–∞–º–æ–∂–µ–Ω–Ω–∞—è –ø–æ—à–ª–∏–Ω–∞
    customs_fee = clean_number(customs_fees["sbor"])  # –¢–∞–º–æ–∂–µ–Ω–Ω—ã–π —Å–±–æ—Ä
    recycling_fee = clean_number(customs_fees["util"])  # –£—Ç–∏–ª–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–±–æ—Ä

    # –†–∞—Å—á–µ—Ç –∏—Ç–æ–≥–æ–≤–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –≤ —Ä—É–±–ª—è—Ö
    total_cost_rub = (
        price_rub
        + ((1400000 / usd_to_krw_rate) * usd_to_rub_rate)
        + ((1400000 / usd_to_krw_rate) * usd_to_rub_rate)
        + ((440000 / usd_to_krw_rate) * usd_to_rub_rate)
        + 120000
        + customs_fee
        + customs_duty
        + recycling_fee
        + 13000
        + 230000
    )

    total_cost_krw = (
        car_price_krw
        + 1400000
        + 1400000
        + 440000
        + (120000 / usd_to_rub_rate) * usd_to_krw_rate
        + (customs_fee / usd_to_rub_rate) * usd_to_krw_rate
        + (customs_duty / usd_to_rub_rate) * usd_to_krw_rate
        + (recycling_fee / usd_to_rub_rate) * usd_to_krw_rate
        + (13000 / usd_to_rub_rate) * usd_to_krw_rate
        + (230000 / usd_to_rub_rate) * usd_to_krw_rate
    )

    total_cost_usd = (
        price_usd
        + (1400000 / usd_to_krw_rate)
        + (1400000 / usd_to_krw_rate)
        + (440000 / usd_to_krw_rate)
        + (120000 / usd_to_rub_rate)
        + (customs_fee / usd_to_rub_rate)
        + (customs_duty / usd_to_rub_rate)
        + (recycling_fee / usd_to_rub_rate)
        + (13000 / usd_to_rub_rate)
        + (230000 / usd_to_rub_rate)
    )

    company_fees_krw = 1400000
    company_fees_usd = 1400000 / usdt_to_krw_rate
    company_fees_rub = (1400000 / usd_to_krw_rate) * usd_to_rub_rate

    freight_korea_krw = 1400000
    freight_korea_usd = 1400000 / usd_to_krw_rate
    freight_korea_rub = (1400000 / usd_to_krw_rate) * usd_to_rub_rate

    dealer_korea_krw = 440000
    dealer_korea_usd = 440000 / usd_to_krw_rate
    dealer_korea_rub = (440000 / usd_to_krw_rate) * usd_to_rub_rate

    broker_russia_rub = 120000
    broker_russia_usd = 120000 / usd_to_rub_rate
    broker_russia_krw = (120000 / usd_to_rub_rate) * usd_to_krw_rate

    customs_duty_rub = customs_duty
    customs_duty_usd = customs_duty / usd_to_rub_rate
    customs_duty_krw = (customs_duty / usd_to_rub_rate) * usd_to_krw_rate

    customs_fee_rub = customs_fee
    customs_fee_usd = customs_fee / usd_to_rub_rate
    customs_fee_krw = (customs_fee / usd_to_rub_rate) * usd_to_krw_rate

    util_fee_rub = recycling_fee
    util_fee_usd = recycling_fee / usd_to_rub_rate
    util_fee_krw = (recycling_fee / usd_to_rub_rate) * usd_to_krw_rate

    vladivostok_transfer_rub = 13000
    vladivostok_transfer_usd = 13000 / usd_to_rub_rate
    vladivostok_transfer_krw = (13000 / usd_to_rub_rate) * usdt_to_krw_rate

    moscow_transporter_rub = 230000
    moscow_transporter_usd = 230000 / usd_to_rub_rate
    moscow_transporter_krw = (230000 / usd_to_rub_rate) * usd_to_krw_rate

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–∞—Å—á–µ—Ç–æ–º —Å—Ç–æ–∏–º–æ—Å—Ç–∏
    result_message = (
        f"üí∞ <b>–†–∞—Å—á—ë—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è</b> üí∞\n\n"
        f"üìå –í–æ–∑—Ä–∞—Å—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª—è: <b>{age_group} –ª–µ—Ç</b>\n"
        f"üöó –û–±—ä—ë–º –¥–≤–∏–≥–∞—Ç–µ–ª—è: <b>{format_number(engine_volume)} —Å–º¬≥</b>\n\n"
        f"<i>–ü–ï–†–í–ê–Ø –ß–ê–°–¢–¨ –û–ü–õ–ê–¢–´ (–ö–û–†–ï–Ø)</i>:\n\n"
        f"–°—Ç–æ–∏–º–æ—Å—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è:\n<b>${format_number(price_usd)}</b> | <b>‚Ç©{format_number(car_price_krw)}</b> | <b>{format_number(price_rub)} ‚ÇΩ</b>\n\n"
        f"–£—Å–ª—É–≥–∏ —Ñ–∏—Ä–º—ã (–ø–æ–∏—Å–∫ –∏ –ø–æ–¥–±–æ—Ä –∞–≤—Ç–æ, –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è, 3 –æ—Å–º–æ—Ç—Ä–∞):\n<b>${format_number(company_fees_usd)}</b> | <b>‚Ç©{format_number(company_fees_krw)}</b> | <b>{format_number(company_fees_rub)} ‚ÇΩ</b>\n\n"
        f"–§—Ä–∞—Ö—Ç (–æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ –ø–æ—Ä—Ç, –¥–æ—Å—Ç–∞–≤–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –Ω–∞ –±–∞–∑—É, –æ–ø–ª–∞—Ç–∞ —Å—É–¥–Ω–∞):\n<b>${format_number(freight_korea_usd)}</b> | <b>‚Ç©{format_number(freight_korea_krw)}</b> | <b>{format_number(freight_korea_rub)} ‚ÇΩ</b>\n\n\n"
        f"–î–∏–ª–µ—Ä—Å–∫–∏–π —Å–±–æ—Ä:\n<b>${format_number(dealer_korea_usd)}</b> | <b>‚Ç©{format_number(dealer_korea_krw)}</b> | <b>{format_number(dealer_korea_rub)} ‚ÇΩ</b>\n\n"
        f"<i>–í–¢–û–†–ê–Ø –ß–ê–°–¢–¨ –û–ü–õ–ê–¢–´ (–†–û–°–°–ò–Ø)</i>:\n\n"
        f"–ë—Ä–æ–∫–µ—Ä-–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫:\n<b>${format_number(broker_russia_usd)}</b> | <b>‚Ç©{format_number(broker_russia_krw)}</b> | <b>{format_number(broker_russia_rub)} ‚ÇΩ</b>\n\n\n"
        f"–ï–¥–∏–Ω–∞—è —Ç–∞–º–æ–∂–µ–Ω–Ω–∞—è —Å—Ç–∞–≤–∫–∞:\n<b>${format_number(customs_duty_usd)}</b> | <b>‚Ç©{format_number(customs_duty_krw)}</b> | <b>{format_number(customs_duty_rub)} ‚ÇΩ</b>\n\n"
        f"–£—Ç–∏–ª–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–±–æ—Ä:\n<b>${format_number(util_fee_usd)}</b> | <b>‚Ç©{format_number(util_fee_krw)}</b> | <b>{format_number(util_fee_rub)} ‚ÇΩ</b>\n\n\n"
        f"–¢–∞–º–æ–∂–µ–Ω–Ω–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ:\n<b>${format_number(customs_fee_usd)}</b> | <b>‚Ç©{format_number(customs_fee_krw)}</b> | <b>{format_number(customs_fee_rub)} ‚ÇΩ</b>\n\n"
        f"–ü–µ—Ä–µ–≥–æ–Ω –≤–æ –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫–µ:\n<b>${format_number(vladivostok_transfer_usd)}</b> | <b>‚Ç©{format_number(vladivostok_transfer_krw)}</b> | <b>{format_number(vladivostok_transfer_rub)} ‚ÇΩ</b>\n\n"
        f"–ê–≤—Ç–æ–≤–æ–∑ –¥–æ –ú–æ—Å–∫–≤—ã:\n<b>${format_number(moscow_transporter_usd)}</b> | <b>‚Ç©{format_number(moscow_transporter_krw)}</b> | <b>{format_number(moscow_transporter_rub)} ‚ÇΩ</b>\n\n"
        f"–ò—Ç–æ–≥–æ –ø–æ–¥ –∫–ª—é—á: \n<b>${format_number(total_cost_usd)}</b> | <b>‚Ç©{format_number(total_cost_krw)}</b> | <b>{format_number(total_cost_rub)} ‚ÇΩ</b>\n\n"
        f"<b>–î–æ—Å—Ç–∞–≤–∫—É –¥–æ –≤–∞—à–µ–≥–æ –≥–æ—Ä–æ–¥–∞ —É—Ç–æ—á–Ω—è–π—Ç–µ —É –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤:</b>\n"
        f"‚ñ™Ô∏è +82-10-7626-1999\n"
        f"‚ñ™Ô∏è +82-10-7934-6603\n"
        # f"‚ñ™Ô∏è +82 10-5128-8082 (–ê–ª–µ–∫—Å–∞–Ω–¥—Ä)\n\n"
    )

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –¥–∞–ª—å–Ω–µ–π—à–∏–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(
        types.InlineKeyboardButton(
            "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –¥—Ä—É–≥–æ–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å", callback_data="calculate_another_manual"
        )
    )
    keyboard.add(
        types.InlineKeyboardButton(
            "–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", url="https://t.me/HYT_TRADING_KR"
        )
    )
    keyboard.add(types.InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"))

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    bot.send_message(
        message.chat.id,
        result_message,
        parse_mode="HTML",
        reply_markup=keyboard,
    )

    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ —Ä–∞—Å—á–µ—Ç–∞
    del user_data[message.chat.id]


@bot.message_handler(func=lambda message: True)
def handle_message(message):
    user_message = message.text.strip()
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å"
    if user_message == CALCULATE_CAR_TEXT:
        bot.send_message(
            message.chat.id,
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—å —Å –æ–¥–Ω–æ–≥–æ –∏–∑ —Å–∞–π—Ç–æ–≤ (encar.com, kbchachacha.com):",
        )

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Å—Å—ã–ª–∫–∏
    elif re.match(
        r"^https?://(www|fem)\.encar\.com/.*|^https?://(www\.)?kbchachacha\.com/.*|^https?://m\.kbchachacha\.com/.*",
        user_message,
    ):
        calculate_cost(user_message, message)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã
    elif user_message == "–ù–∞–ø–∏—Å–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—É":
        managers_list = [
            {"name": "–ú–µ–Ω–µ–¥–∂–µ—Ä 1", "whatsapp": "https://wa.me/821076261999"},
            {"name": "–ú–µ–Ω–µ–¥–∂–µ—Ä 2", "whatsapp": "https://wa.me/821079346603"},
        ]

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
        message_text = "–í—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –æ–¥–Ω–∏–º –∏–∑ –Ω–∞—à–∏—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤:\n\n"
        for manager in managers_list:
            message_text += f"[{manager['name']}]({manager['whatsapp']})\n"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Markdown
        bot.send_message(message.chat.id, message_text, parse_mode="Markdown")

    elif user_message == "–û –Ω–∞—Å":
        about_message = "Quickxa\n–Æ–∂–Ω–æ–∫–æ—Ä–µ–π—Å–∫–∞—è —ç–∫—Å–ø–æ—Ä—Ç–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è.\n–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º—Å—è –Ω–∞ –ø–æ—Å—Ç–∞–≤–∫–∞—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –∏–∑ –Æ–∂–Ω–æ–π –ö–æ—Ä–µ–∏ –≤ —Å—Ç—Ä–∞–Ω—ã –°–ù–ì.\n–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã –±–æ–ª–µ–µ 5 –ª–µ—Ç.\n\n–ü–æ—á–µ–º—É –≤—ã–±–∏—Ä–∞—é—Ç –Ω–∞—Å?\n‚Ä¢ –ù–∞–¥–µ–∂–Ω–æ—Å—Ç—å –∏ —Å–∫–æ—Ä–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏.\n‚Ä¢ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∫ –∫–∞–∂–¥–æ–º—É –∫–ª–∏–µ–Ω—Ç—É.\n‚Ä¢ –ü–æ–ª–Ω–æ–µ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏.\n\nüí¨ –í–∞—à –ø—É—Ç—å –∫ –Ω–∞–¥–µ–∂–Ω—ã–º –∞–≤—Ç–æ–º–æ–±–∏–ª—è–º –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –∑–¥–µ—Å—å!"
        bot.send_message(message.chat.id, about_message)

    elif user_message == "Telegram-–∫–∞–Ω–∞–ª":
        channel_link = "https://t.me/HYT_Trading"
        bot.send_message(
            message.chat.id, f"–ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –Ω–∞—à Telegram-–∫–∞–Ω–∞–ª: {channel_link}"
        )
    elif user_message == "Instagram":
        instagram_link = "https://www.instagram.com/hyt_auto"
        bot.send_message(
            message.chat.id,
            f"–ü–æ—Å–µ—Ç–∏—Ç–µ –Ω–∞—à Instagram: {instagram_link}",
        )
    elif user_message == "Tik-Tok":
        tiktok_link = "https://www.tiktok.com/@hyt_auto_korea"
        bot.send_message(
            message.chat.id,
            f"–°–ª–µ–¥–∏—Ç–µ –∑–∞ —Å–≤–µ–∂–∏–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º –Ω–∞ –Ω–∞—à–µ–º TikTok: {tiktok_link}",
        )
    else:
        bot.send_message(
            message.chat.id,
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—å —Å —Å–∞–π—Ç–∞ (encar.com, kbchachacha.com)",
        )


# Run the bot
if __name__ == "__main__":
    create_tables()
    print("üöÄ ===============================================")
    print("üöÄ Quickxa Bot - –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...")
    print("üöÄ ===============================================")
    set_bot_commands()
    print("‚úÖ –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")

    # –£–¥–∞–ª—è–µ–º –≤–µ–±—Ö—É–∫ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –±–æ—Ç–∞
    print("üîÑ –£–¥–∞–ª–µ–Ω–∏–µ –≤–µ–±—Ö—É–∫–∞...")
    bot.delete_webhook()
    print("‚úÖ –í–µ–±—Ö—É–∫ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫—É—Ä—Å –∫–∞–∂–¥—ã–µ 12 —á–∞—Å–æ–≤ –∏ —É–¥–∞–ª—è–µ–º –≤–µ–±—Ö—É–∫ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
    print("‚è±Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á...")
    scheduler = BackgroundScheduler()
    scheduler.add_job(get_usdt_to_krw_rate, "interval", hours=12)
    print("üí± –ó–∞–¥–∞—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—É—Ä—Å–∞ USDT‚ÜíKRW –¥–æ–±–∞–≤–ª–µ–Ω–∞ (–∫–∞–∂–¥—ã–µ 12 —á–∞—Å–æ–≤)")
    scheduler.add_job(bot.delete_webhook, "interval", minutes=5)
    print("üîÑ –ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤–µ–±—Ö—É–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ (–∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç)")
    scheduler.start()
    print("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")

    print("ü§ñ ===============================================")
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –≤ —Ä–µ–∂–∏–º–µ polling...")
    print("ü§ñ ===============================================")
    bot.polling(non_stop=True)
